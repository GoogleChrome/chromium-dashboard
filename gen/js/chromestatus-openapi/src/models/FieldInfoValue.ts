/* tslint:disable */
/* eslint-disable */
/**
 * chomestatus API
 * The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ArrayValue } from './ArrayValue';
import {
    instanceOfArrayValue,
    ArrayValueFromJSON,
    ArrayValueFromJSONTyped,
    ArrayValueToJSON,
} from './ArrayValue';
import type { BooleanValue } from './BooleanValue';
import {
    instanceOfBooleanValue,
    BooleanValueFromJSON,
    BooleanValueFromJSONTyped,
    BooleanValueToJSON,
} from './BooleanValue';
import type { IntegerValue } from './IntegerValue';
import {
    instanceOfIntegerValue,
    IntegerValueFromJSON,
    IntegerValueFromJSONTyped,
    IntegerValueToJSON,
} from './IntegerValue';
import type { StringValue } from './StringValue';
import {
    instanceOfStringValue,
    StringValueFromJSON,
    StringValueFromJSONTyped,
    StringValueToJSON,
} from './StringValue';

/**
 * @type FieldInfoValue
 * 
 * @export
 */
export type FieldInfoValue = { valueType: 'array' } & ArrayValue | { valueType: 'boolean' } & BooleanValue | { valueType: 'integer' } & IntegerValue | { valueType: 'string' } & StringValue;

export function FieldInfoValueFromJSON(json: any): FieldInfoValue {
    return FieldInfoValueFromJSONTyped(json, false);
}

export function FieldInfoValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldInfoValue {
    if (json == null) {
        return json;
    }
    switch (json['valueType']) {
        case 'array':
            return Object.assign({}, ArrayValueFromJSONTyped(json, true), { valueType: 'array' });
        case 'boolean':
            return Object.assign({}, BooleanValueFromJSONTyped(json, true), { valueType: 'boolean' });
        case 'integer':
            return Object.assign({}, IntegerValueFromJSONTyped(json, true), { valueType: 'integer' });
        case 'string':
            return Object.assign({}, StringValueFromJSONTyped(json, true), { valueType: 'string' });
        default:
            throw new Error(`No variant of FieldInfoValue exists with 'valueType=${json['valueType']}'`);
    }
}

export function FieldInfoValueToJSON(value?: FieldInfoValue | null): any {
    if (value == null) {
        return value;
    }
    switch (value['valueType']) {
        case 'array':
            return ArrayValueToJSON(value);
        case 'boolean':
            return BooleanValueToJSON(value);
        case 'integer':
            return IntegerValueToJSON(value);
        case 'string':
            return StringValueToJSON(value);
        default:
            throw new Error(`No variant of FieldInfoValue exists with 'valueType=${value['valueType']}'`);
    }

}

