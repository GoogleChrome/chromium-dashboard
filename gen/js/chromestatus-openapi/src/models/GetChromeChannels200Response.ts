/* tslint:disable */
/* eslint-disable */
/**
 * chomestatus API
 * The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ChannelInfo } from './ChannelInfo';
import {
    instanceOfChannelInfo,
    ChannelInfoFromJSON,
    ChannelInfoFromJSONTyped,
    ChannelInfoToJSON,
} from './ChannelInfo';
import type { { [key: string]: ChannelInfo; } } from './{ [key: string]: ChannelInfo; }';
import {
    instanceOf{ [key: string]: ChannelInfo; },
    { [key: string]: ChannelInfo; }FromJSON,
    { [key: string]: ChannelInfo; }FromJSONTyped,
    { [key: string]: ChannelInfo; }ToJSON,
} from './{ [key: string]: ChannelInfo; }';

/**
 * @type GetChromeChannels200Response
 * 
 * @export
 */
export type GetChromeChannels200Response = ChannelInfo | { [key: string]: ChannelInfo; };

export function GetChromeChannels200ResponseFromJSON(json: any): GetChromeChannels200Response {
    return GetChromeChannels200ResponseFromJSONTyped(json, false);
}

export function GetChromeChannels200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetChromeChannels200Response {
    if (json == null) {
        return json;
    }
    if (instanceOfChannelInfo(json)) {
        return ChannelInfoFromJSONTyped(json, true);
    }
    if (instanceOf{ [key: string]: ChannelInfo; }(json)) {
        return { [key: string]: ChannelInfo; }FromJSONTyped(json, true);
    }
}

export function GetChromeChannels200ResponseToJSON(value?: GetChromeChannels200Response | null): any {
    if (value == null) {
        return value;
    }

    if (instanceOfChannelInfo(value)) {
        return ChannelInfoToJSON(value as ChannelInfo);
    }
    if (instanceOf{ [key: string]: ChannelInfo; }(value)) {
        return { [key: string]: ChannelInfo; }ToJSON(value as { [key: string]: ChannelInfo; });
    }

    return {};
}

