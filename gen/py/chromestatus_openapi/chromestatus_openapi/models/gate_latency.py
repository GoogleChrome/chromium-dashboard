from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class GateLatency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gate_type=None, latency_days=None):  # noqa: E501
        """GateLatency - a model defined in OpenAPI

        :param gate_type: The gate_type of this GateLatency.  # noqa: E501
        :type gate_type: int
        :param latency_days: The latency_days of this GateLatency.  # noqa: E501
        :type latency_days: int
        """
        self.openapi_types = {
            'gate_type': int,
            'latency_days': int
        }

        self.attribute_map = {
            'gate_type': 'gate_type',
            'latency_days': 'latency_days'
        }

        self._gate_type = gate_type
        self._latency_days = latency_days

    @classmethod
    def from_dict(cls, dikt) -> 'GateLatency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GateLatency of this GateLatency.  # noqa: E501
        :rtype: GateLatency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gate_type(self) -> int:
        """Gets the gate_type of this GateLatency.


        :return: The gate_type of this GateLatency.
        :rtype: int
        """
        return self._gate_type

    @gate_type.setter
    def gate_type(self, gate_type: int):
        """Sets the gate_type of this GateLatency.


        :param gate_type: The gate_type of this GateLatency.
        :type gate_type: int
        """
        if gate_type is None:
            raise ValueError("Invalid value for `gate_type`, must not be `None`")  # noqa: E501

        self._gate_type = gate_type

    @property
    def latency_days(self) -> int:
        """Gets the latency_days of this GateLatency.


        :return: The latency_days of this GateLatency.
        :rtype: int
        """
        return self._latency_days

    @latency_days.setter
    def latency_days(self, latency_days: int):
        """Sets the latency_days of this GateLatency.


        :param latency_days: The latency_days of this GateLatency.
        :type latency_days: int
        """
        if latency_days is None:
            raise ValueError("Invalid value for `latency_days`, must not be `None`")  # noqa: E501

        self._latency_days = latency_days
