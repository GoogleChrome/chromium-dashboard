<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class FeatureDictInnerMaturityInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text=None, short_text=None, val=None):  # noqa: E501
        """FeatureDictInnerMaturityInfo - a model defined in OpenAPI

        :param text: The text of this FeatureDictInnerMaturityInfo.  # noqa: E501
        :type text: str
        :param short_text: The short_text of this FeatureDictInnerMaturityInfo.  # noqa: E501
        :type short_text: str
        :param val: The val of this FeatureDictInnerMaturityInfo.  # noqa: E501
        :type val: int
        """
        self.openapi_types = {
            'text': str,
            'short_text': str,
            'val': int
        }

        self.attribute_map = {
            'text': 'text',
            'short_text': 'short_text',
            'val': 'val'
        }

        self._text = text
        self._short_text = short_text
        self._val = val

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerMaturityInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerMaturityInfo of this FeatureDictInnerMaturityInfo.  # noqa: E501
        :rtype: FeatureDictInnerMaturityInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this FeatureDictInnerMaturityInfo.


        :return: The text of this FeatureDictInnerMaturityInfo.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this FeatureDictInnerMaturityInfo.


        :param text: The text of this FeatureDictInnerMaturityInfo.
        :type text: str
        """

        self._text = text

    @property
    def short_text(self) -> str:
        """Gets the short_text of this FeatureDictInnerMaturityInfo.


        :return: The short_text of this FeatureDictInnerMaturityInfo.
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text: str):
        """Sets the short_text of this FeatureDictInnerMaturityInfo.


        :param short_text: The short_text of this FeatureDictInnerMaturityInfo.
        :type short_text: str
        """

        self._short_text = short_text

    @property
    def val(self) -> int:
        """Gets the val of this FeatureDictInnerMaturityInfo.


        :return: The val of this FeatureDictInnerMaturityInfo.
        :rtype: int
        """
        return self._val

    @val.setter
    def val(self, val: int):
        """Sets the val of this FeatureDictInnerMaturityInfo.


        :param val: The val of this FeatureDictInnerMaturityInfo.
        :type val: int
        """

        self._val = val
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerMaturityInfo(BaseModel):
    """
    FeatureDictInnerMaturityInfo
    """ # noqa: E501
    text: Optional[StrictStr] = None
    short_text: Optional[StrictStr] = None
    val: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["text", "short_text", "val"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerMaturityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if short_text (nullable) is None
        # and model_fields_set contains the field
        if self.short_text is None and "short_text" in self.model_fields_set:
            _dict['short_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerMaturityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "short_text": obj.get("short_text"),
            "val": obj.get("val")
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
