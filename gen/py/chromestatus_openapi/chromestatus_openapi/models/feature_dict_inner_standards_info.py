<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.feature_dict_inner_maturity_info import FeatureDictInnerMaturityInfo
from chromestatus_openapi import util

from chromestatus_openapi.models.feature_dict_inner_maturity_info import FeatureDictInnerMaturityInfo  # noqa: E501

class FeatureDictInnerStandardsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spec=None, maturity=None):  # noqa: E501
        """FeatureDictInnerStandardsInfo - a model defined in OpenAPI

        :param spec: The spec of this FeatureDictInnerStandardsInfo.  # noqa: E501
        :type spec: str
        :param maturity: The maturity of this FeatureDictInnerStandardsInfo.  # noqa: E501
        :type maturity: FeatureDictInnerMaturityInfo
        """
        self.openapi_types = {
            'spec': str,
            'maturity': FeatureDictInnerMaturityInfo
        }

        self.attribute_map = {
            'spec': 'spec',
            'maturity': 'maturity'
        }

        self._spec = spec
        self._maturity = maturity

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerStandardsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerStandardsInfo of this FeatureDictInnerStandardsInfo.  # noqa: E501
        :rtype: FeatureDictInnerStandardsInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spec(self) -> str:
        """Gets the spec of this FeatureDictInnerStandardsInfo.


        :return: The spec of this FeatureDictInnerStandardsInfo.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec: str):
        """Sets the spec of this FeatureDictInnerStandardsInfo.


        :param spec: The spec of this FeatureDictInnerStandardsInfo.
        :type spec: str
        """

        self._spec = spec

    @property
    def maturity(self) -> FeatureDictInnerMaturityInfo:
        """Gets the maturity of this FeatureDictInnerStandardsInfo.


        :return: The maturity of this FeatureDictInnerStandardsInfo.
        :rtype: FeatureDictInnerMaturityInfo
        """
        return self._maturity

    @maturity.setter
    def maturity(self, maturity: FeatureDictInnerMaturityInfo):
        """Sets the maturity of this FeatureDictInnerStandardsInfo.


        :param maturity: The maturity of this FeatureDictInnerStandardsInfo.
        :type maturity: FeatureDictInnerMaturityInfo
        """

        self._maturity = maturity
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.feature_dict_inner_maturity_info import FeatureDictInnerMaturityInfo
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerStandardsInfo(BaseModel):
    """
    FeatureDictInnerStandardsInfo
    """ # noqa: E501
    spec: Optional[StrictStr] = None
    maturity: Optional[FeatureDictInnerMaturityInfo] = None
    __properties: ClassVar[List[str]] = ["spec", "maturity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerStandardsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maturity
        if self.maturity:
            _dict['maturity'] = self.maturity.to_dict()
        # set to None if spec (nullable) is None
        # and model_fields_set contains the field
        if self.spec is None and "spec" in self.model_fields_set:
            _dict['spec'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerStandardsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spec": obj.get("spec"),
            "maturity": FeatureDictInnerMaturityInfo.from_dict(obj["maturity"]) if obj.get("maturity") is not None else None
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
