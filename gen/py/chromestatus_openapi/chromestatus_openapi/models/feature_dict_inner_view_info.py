<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class FeatureDictInnerViewInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text=None, val=None, url=None, notes=None):  # noqa: E501
        """FeatureDictInnerViewInfo - a model defined in OpenAPI

        :param text: The text of this FeatureDictInnerViewInfo.  # noqa: E501
        :type text: str
        :param val: The val of this FeatureDictInnerViewInfo.  # noqa: E501
        :type val: int
        :param url: The url of this FeatureDictInnerViewInfo.  # noqa: E501
        :type url: str
        :param notes: The notes of this FeatureDictInnerViewInfo.  # noqa: E501
        :type notes: str
        """
        self.openapi_types = {
            'text': str,
            'val': int,
            'url': str,
            'notes': str
        }

        self.attribute_map = {
            'text': 'text',
            'val': 'val',
            'url': 'url',
            'notes': 'notes'
        }

        self._text = text
        self._val = val
        self._url = url
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerViewInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerViewInfo of this FeatureDictInnerViewInfo.  # noqa: E501
        :rtype: FeatureDictInnerViewInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this FeatureDictInnerViewInfo.


        :return: The text of this FeatureDictInnerViewInfo.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this FeatureDictInnerViewInfo.


        :param text: The text of this FeatureDictInnerViewInfo.
        :type text: str
        """

        self._text = text

    @property
    def val(self) -> int:
        """Gets the val of this FeatureDictInnerViewInfo.


        :return: The val of this FeatureDictInnerViewInfo.
        :rtype: int
        """
        return self._val

    @val.setter
    def val(self, val: int):
        """Sets the val of this FeatureDictInnerViewInfo.


        :param val: The val of this FeatureDictInnerViewInfo.
        :type val: int
        """

        self._val = val

    @property
    def url(self) -> str:
        """Gets the url of this FeatureDictInnerViewInfo.


        :return: The url of this FeatureDictInnerViewInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this FeatureDictInnerViewInfo.


        :param url: The url of this FeatureDictInnerViewInfo.
        :type url: str
        """

        self._url = url

    @property
    def notes(self) -> str:
        """Gets the notes of this FeatureDictInnerViewInfo.


        :return: The notes of this FeatureDictInnerViewInfo.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this FeatureDictInnerViewInfo.


        :param notes: The notes of this FeatureDictInnerViewInfo.
        :type notes: str
        """

        self._notes = notes
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerViewInfo(BaseModel):
    """
    FeatureDictInnerViewInfo
    """ # noqa: E501
    text: Optional[StrictStr] = None
    val: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["text", "val", "url", "notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerViewInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if val (nullable) is None
        # and model_fields_set contains the field
        if self.val is None and "val" in self.model_fields_set:
            _dict['val'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerViewInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "val": obj.get("val"),
            "url": obj.get("url"),
            "notes": obj.get("notes")
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
