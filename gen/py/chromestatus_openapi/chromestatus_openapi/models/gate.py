# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Gate(BaseModel):
    """
    Gate
    """ # noqa: E501
    id: Optional[StrictInt] = None
    feature_id: Optional[StrictInt] = None
    stage_id: Optional[StrictInt] = None
    gate_type: Optional[StrictInt] = None
    team_name: Optional[StrictStr] = None
    gate_name: Optional[StrictStr] = None
    escalation_email: Optional[StrictStr] = None
    state: Optional[StrictInt] = None
    requested_on: Optional[datetime] = None
    responded_on: Optional[datetime] = None
    assignee_emails: Optional[List[StrictStr]] = None
    next_action: Optional[StrictStr] = None
    additional_review: Optional[StrictBool] = None
    slo_initial_response: Optional[StrictInt] = Field(default=5, description="DEFAULT_SLO_LIMIT is 5 in approval_defs.py")
    slo_initial_response_took: Optional[StrictInt] = None
    slo_initial_response_remaining: Optional[StrictInt] = None
    possible_assignee_emails: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "feature_id", "stage_id", "gate_type", "team_name", "gate_name", "escalation_email", "state", "requested_on", "responded_on", "assignee_emails", "next_action", "additional_review", "slo_initial_response", "slo_initial_response_took", "slo_initial_response_remaining", "possible_assignee_emails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Gate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if escalation_email (nullable) is None
        # and model_fields_set contains the field
        if self.escalation_email is None and "escalation_email" in self.model_fields_set:
            _dict['escalation_email'] = None

        # set to None if requested_on (nullable) is None
        # and model_fields_set contains the field
        if self.requested_on is None and "requested_on" in self.model_fields_set:
            _dict['requested_on'] = None

        # set to None if responded_on (nullable) is None
        # and model_fields_set contains the field
        if self.responded_on is None and "responded_on" in self.model_fields_set:
            _dict['responded_on'] = None

        # set to None if next_action (nullable) is None
        # and model_fields_set contains the field
        if self.next_action is None and "next_action" in self.model_fields_set:
            _dict['next_action'] = None

        # set to None if slo_initial_response_took (nullable) is None
        # and model_fields_set contains the field
        if self.slo_initial_response_took is None and "slo_initial_response_took" in self.model_fields_set:
            _dict['slo_initial_response_took'] = None

        # set to None if slo_initial_response_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.slo_initial_response_remaining is None and "slo_initial_response_remaining" in self.model_fields_set:
            _dict['slo_initial_response_remaining'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Gate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "feature_id": obj.get("feature_id"),
            "stage_id": obj.get("stage_id"),
            "gate_type": obj.get("gate_type"),
            "team_name": obj.get("team_name"),
            "gate_name": obj.get("gate_name"),
            "escalation_email": obj.get("escalation_email"),
            "state": obj.get("state"),
            "requested_on": obj.get("requested_on"),
            "responded_on": obj.get("responded_on"),
            "assignee_emails": obj.get("assignee_emails"),
            "next_action": obj.get("next_action"),
            "additional_review": obj.get("additional_review"),
            "slo_initial_response": obj.get("slo_initial_response") if obj.get("slo_initial_response") is not None else 5,
            "slo_initial_response_took": obj.get("slo_initial_response_took"),
            "slo_initial_response_remaining": obj.get("slo_initial_response_remaining"),
            "possible_assignee_emails": obj.get("possible_assignee_emails")
        })
        return _obj


