<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.stage_dict import StageDict
from chromestatus_openapi import util

from chromestatus_openapi.models.stage_dict import StageDict  # noqa: E501

class StageDictExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, created=None, feature_id=None, stage_type=None, display_name=None, intent_stage=None, intent_thread_url=None, announcement_url=None, origin_trial_id=None, experiment_goals=None, experiment_risks=None, extensions=None, origin_trial_feedback_url=None, ot_action_requested=None, ot_activation_date=None, ot_approval_buganizer_component=None, ot_approval_buganizer_custom_field_id=None, ot_approval_criteria_url=None, ot_approval_group_email=None, ot_chromium_trial_name=None, ot_description=None, ot_display_name=None, ot_documentation_url=None, ot_emails=None, ot_feedback_submission_url=None, ot_has_third_party_support=None, ot_is_critical_trial=None, ot_is_deprecation_trial=None, ot_owner_email=None, ot_require_approvals=None, ot_setup_status=None, ot_webfeature_use_counter=None, ot_request_note=None, ot_stage_id=None, experiment_extension_reason=None, finch_url=None, rollout_details=None, rollout_impact=None, rollout_milestone=None, rollout_platforms=None, enterprise_policies=None, pm_emails=None, tl_emails=None, ux_emails=None, te_emails=None):  # noqa: E501
        """StageDictExtension - a model defined in OpenAPI

        :param id: The id of this StageDictExtension.  # noqa: E501
        :type id: int
        :param created: The created of this StageDictExtension.  # noqa: E501
        :type created: datetime
        :param feature_id: The feature_id of this StageDictExtension.  # noqa: E501
        :type feature_id: int
        :param stage_type: The stage_type of this StageDictExtension.  # noqa: E501
        :type stage_type: int
        :param display_name: The display_name of this StageDictExtension.  # noqa: E501
        :type display_name: str
        :param intent_stage: The intent_stage of this StageDictExtension.  # noqa: E501
        :type intent_stage: int
        :param intent_thread_url: The intent_thread_url of this StageDictExtension.  # noqa: E501
        :type intent_thread_url: str
        :param announcement_url: The announcement_url of this StageDictExtension.  # noqa: E501
        :type announcement_url: str
        :param origin_trial_id: The origin_trial_id of this StageDictExtension.  # noqa: E501
        :type origin_trial_id: str
        :param experiment_goals: The experiment_goals of this StageDictExtension.  # noqa: E501
        :type experiment_goals: str
        :param experiment_risks: The experiment_risks of this StageDictExtension.  # noqa: E501
        :type experiment_risks: str
        :param extensions: The extensions of this StageDictExtension.  # noqa: E501
        :type extensions: List[StageDict]
        :param origin_trial_feedback_url: The origin_trial_feedback_url of this StageDictExtension.  # noqa: E501
        :type origin_trial_feedback_url: str
        :param ot_action_requested: The ot_action_requested of this StageDictExtension.  # noqa: E501
        :type ot_action_requested: bool
        :param ot_activation_date: The ot_activation_date of this StageDictExtension.  # noqa: E501
        :type ot_activation_date: datetime
        :param ot_approval_buganizer_component: The ot_approval_buganizer_component of this StageDictExtension.  # noqa: E501
        :type ot_approval_buganizer_component: int
        :param ot_approval_buganizer_custom_field_id: The ot_approval_buganizer_custom_field_id of this StageDictExtension.  # noqa: E501
        :type ot_approval_buganizer_custom_field_id: int
        :param ot_approval_criteria_url: The ot_approval_criteria_url of this StageDictExtension.  # noqa: E501
        :type ot_approval_criteria_url: str
        :param ot_approval_group_email: The ot_approval_group_email of this StageDictExtension.  # noqa: E501
        :type ot_approval_group_email: str
        :param ot_chromium_trial_name: The ot_chromium_trial_name of this StageDictExtension.  # noqa: E501
        :type ot_chromium_trial_name: str
        :param ot_description: The ot_description of this StageDictExtension.  # noqa: E501
        :type ot_description: str
        :param ot_display_name: The ot_display_name of this StageDictExtension.  # noqa: E501
        :type ot_display_name: str
        :param ot_documentation_url: The ot_documentation_url of this StageDictExtension.  # noqa: E501
        :type ot_documentation_url: str
        :param ot_emails: The ot_emails of this StageDictExtension.  # noqa: E501
        :type ot_emails: List[str]
        :param ot_feedback_submission_url: The ot_feedback_submission_url of this StageDictExtension.  # noqa: E501
        :type ot_feedback_submission_url: str
        :param ot_has_third_party_support: The ot_has_third_party_support of this StageDictExtension.  # noqa: E501
        :type ot_has_third_party_support: bool
        :param ot_is_critical_trial: The ot_is_critical_trial of this StageDictExtension.  # noqa: E501
        :type ot_is_critical_trial: bool
        :param ot_is_deprecation_trial: The ot_is_deprecation_trial of this StageDictExtension.  # noqa: E501
        :type ot_is_deprecation_trial: bool
        :param ot_owner_email: The ot_owner_email of this StageDictExtension.  # noqa: E501
        :type ot_owner_email: str
        :param ot_require_approvals: The ot_require_approvals of this StageDictExtension.  # noqa: E501
        :type ot_require_approvals: bool
        :param ot_setup_status: The ot_setup_status of this StageDictExtension.  # noqa: E501
        :type ot_setup_status: int
        :param ot_webfeature_use_counter: The ot_webfeature_use_counter of this StageDictExtension.  # noqa: E501
        :type ot_webfeature_use_counter: str
        :param ot_request_note: The ot_request_note of this StageDictExtension.  # noqa: E501
        :type ot_request_note: str
        :param ot_stage_id: The ot_stage_id of this StageDictExtension.  # noqa: E501
        :type ot_stage_id: int
        :param experiment_extension_reason: The experiment_extension_reason of this StageDictExtension.  # noqa: E501
        :type experiment_extension_reason: str
        :param finch_url: The finch_url of this StageDictExtension.  # noqa: E501
        :type finch_url: str
        :param rollout_details: The rollout_details of this StageDictExtension.  # noqa: E501
        :type rollout_details: str
        :param rollout_impact: The rollout_impact of this StageDictExtension.  # noqa: E501
        :type rollout_impact: int
        :param rollout_milestone: The rollout_milestone of this StageDictExtension.  # noqa: E501
        :type rollout_milestone: int
        :param rollout_platforms: The rollout_platforms of this StageDictExtension.  # noqa: E501
        :type rollout_platforms: List[str]
        :param enterprise_policies: The enterprise_policies of this StageDictExtension.  # noqa: E501
        :type enterprise_policies: List[str]
        :param pm_emails: The pm_emails of this StageDictExtension.  # noqa: E501
        :type pm_emails: List[str]
        :param tl_emails: The tl_emails of this StageDictExtension.  # noqa: E501
        :type tl_emails: List[str]
        :param ux_emails: The ux_emails of this StageDictExtension.  # noqa: E501
        :type ux_emails: List[str]
        :param te_emails: The te_emails of this StageDictExtension.  # noqa: E501
        :type te_emails: List[str]
        """
        self.openapi_types = {
            'id': int,
            'created': datetime,
            'feature_id': int,
            'stage_type': int,
            'display_name': str,
            'intent_stage': int,
            'intent_thread_url': str,
            'announcement_url': str,
            'origin_trial_id': str,
            'experiment_goals': str,
            'experiment_risks': str,
            'extensions': List[StageDict],
            'origin_trial_feedback_url': str,
            'ot_action_requested': bool,
            'ot_activation_date': datetime,
            'ot_approval_buganizer_component': int,
            'ot_approval_buganizer_custom_field_id': int,
            'ot_approval_criteria_url': str,
            'ot_approval_group_email': str,
            'ot_chromium_trial_name': str,
            'ot_description': str,
            'ot_display_name': str,
            'ot_documentation_url': str,
            'ot_emails': List[str],
            'ot_feedback_submission_url': str,
            'ot_has_third_party_support': bool,
            'ot_is_critical_trial': bool,
            'ot_is_deprecation_trial': bool,
            'ot_owner_email': str,
            'ot_require_approvals': bool,
            'ot_setup_status': int,
            'ot_webfeature_use_counter': str,
            'ot_request_note': str,
            'ot_stage_id': int,
            'experiment_extension_reason': str,
            'finch_url': str,
            'rollout_details': str,
            'rollout_impact': int,
            'rollout_milestone': int,
            'rollout_platforms': List[str],
            'enterprise_policies': List[str],
            'pm_emails': List[str],
            'tl_emails': List[str],
            'ux_emails': List[str],
            'te_emails': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'created': 'created',
            'feature_id': 'feature_id',
            'stage_type': 'stage_type',
            'display_name': 'display_name',
            'intent_stage': 'intent_stage',
            'intent_thread_url': 'intent_thread_url',
            'announcement_url': 'announcement_url',
            'origin_trial_id': 'origin_trial_id',
            'experiment_goals': 'experiment_goals',
            'experiment_risks': 'experiment_risks',
            'extensions': 'extensions',
            'origin_trial_feedback_url': 'origin_trial_feedback_url',
            'ot_action_requested': 'ot_action_requested',
            'ot_activation_date': 'ot_activation_date',
            'ot_approval_buganizer_component': 'ot_approval_buganizer_component',
            'ot_approval_buganizer_custom_field_id': 'ot_approval_buganizer_custom_field_id',
            'ot_approval_criteria_url': 'ot_approval_criteria_url',
            'ot_approval_group_email': 'ot_approval_group_email',
            'ot_chromium_trial_name': 'ot_chromium_trial_name',
            'ot_description': 'ot_description',
            'ot_display_name': 'ot_display_name',
            'ot_documentation_url': 'ot_documentation_url',
            'ot_emails': 'ot_emails',
            'ot_feedback_submission_url': 'ot_feedback_submission_url',
            'ot_has_third_party_support': 'ot_has_third_party_support',
            'ot_is_critical_trial': 'ot_is_critical_trial',
            'ot_is_deprecation_trial': 'ot_is_deprecation_trial',
            'ot_owner_email': 'ot_owner_email',
            'ot_require_approvals': 'ot_require_approvals',
            'ot_setup_status': 'ot_setup_status',
            'ot_webfeature_use_counter': 'ot_webfeature_use_counter',
            'ot_request_note': 'ot_request_note',
            'ot_stage_id': 'ot_stage_id',
            'experiment_extension_reason': 'experiment_extension_reason',
            'finch_url': 'finch_url',
            'rollout_details': 'rollout_details',
            'rollout_impact': 'rollout_impact',
            'rollout_milestone': 'rollout_milestone',
            'rollout_platforms': 'rollout_platforms',
            'enterprise_policies': 'enterprise_policies',
            'pm_emails': 'pm_emails',
            'tl_emails': 'tl_emails',
            'ux_emails': 'ux_emails',
            'te_emails': 'te_emails'
        }

        self._id = id
        self._created = created
        self._feature_id = feature_id
        self._stage_type = stage_type
        self._display_name = display_name
        self._intent_stage = intent_stage
        self._intent_thread_url = intent_thread_url
        self._announcement_url = announcement_url
        self._origin_trial_id = origin_trial_id
        self._experiment_goals = experiment_goals
        self._experiment_risks = experiment_risks
        self._extensions = extensions
        self._origin_trial_feedback_url = origin_trial_feedback_url
        self._ot_action_requested = ot_action_requested
        self._ot_activation_date = ot_activation_date
        self._ot_approval_buganizer_component = ot_approval_buganizer_component
        self._ot_approval_buganizer_custom_field_id = ot_approval_buganizer_custom_field_id
        self._ot_approval_criteria_url = ot_approval_criteria_url
        self._ot_approval_group_email = ot_approval_group_email
        self._ot_chromium_trial_name = ot_chromium_trial_name
        self._ot_description = ot_description
        self._ot_display_name = ot_display_name
        self._ot_documentation_url = ot_documentation_url
        self._ot_emails = ot_emails
        self._ot_feedback_submission_url = ot_feedback_submission_url
        self._ot_has_third_party_support = ot_has_third_party_support
        self._ot_is_critical_trial = ot_is_critical_trial
        self._ot_is_deprecation_trial = ot_is_deprecation_trial
        self._ot_owner_email = ot_owner_email
        self._ot_require_approvals = ot_require_approvals
        self._ot_setup_status = ot_setup_status
        self._ot_webfeature_use_counter = ot_webfeature_use_counter
        self._ot_request_note = ot_request_note
        self._ot_stage_id = ot_stage_id
        self._experiment_extension_reason = experiment_extension_reason
        self._finch_url = finch_url
        self._rollout_details = rollout_details
        self._rollout_impact = rollout_impact
        self._rollout_milestone = rollout_milestone
        self._rollout_platforms = rollout_platforms
        self._enterprise_policies = enterprise_policies
        self._pm_emails = pm_emails
        self._tl_emails = tl_emails
        self._ux_emails = ux_emails
        self._te_emails = te_emails

    @classmethod
    def from_dict(cls, dikt) -> 'StageDictExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StageDictExtension of this StageDictExtension.  # noqa: E501
        :rtype: StageDictExtension
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this StageDictExtension.


        :return: The id of this StageDictExtension.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this StageDictExtension.


        :param id: The id of this StageDictExtension.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self) -> datetime:
        """Gets the created of this StageDictExtension.


        :return: The created of this StageDictExtension.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this StageDictExtension.


        :param created: The created of this StageDictExtension.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def feature_id(self) -> int:
        """Gets the feature_id of this StageDictExtension.


        :return: The feature_id of this StageDictExtension.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id: int):
        """Sets the feature_id of this StageDictExtension.


        :param feature_id: The feature_id of this StageDictExtension.
        :type feature_id: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    @property
    def stage_type(self) -> int:
        """Gets the stage_type of this StageDictExtension.


        :return: The stage_type of this StageDictExtension.
        :rtype: int
        """
        return self._stage_type

    @stage_type.setter
    def stage_type(self, stage_type: int):
        """Sets the stage_type of this StageDictExtension.


        :param stage_type: The stage_type of this StageDictExtension.
        :type stage_type: int
        """
        if stage_type is None:
            raise ValueError("Invalid value for `stage_type`, must not be `None`")  # noqa: E501

        self._stage_type = stage_type

    @property
    def display_name(self) -> str:
        """Gets the display_name of this StageDictExtension.


        :return: The display_name of this StageDictExtension.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this StageDictExtension.


        :param display_name: The display_name of this StageDictExtension.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def intent_stage(self) -> int:
        """Gets the intent_stage of this StageDictExtension.


        :return: The intent_stage of this StageDictExtension.
        :rtype: int
        """
        return self._intent_stage

    @intent_stage.setter
    def intent_stage(self, intent_stage: int):
        """Sets the intent_stage of this StageDictExtension.


        :param intent_stage: The intent_stage of this StageDictExtension.
        :type intent_stage: int
        """
        if intent_stage is None:
            raise ValueError("Invalid value for `intent_stage`, must not be `None`")  # noqa: E501

        self._intent_stage = intent_stage

    @property
    def intent_thread_url(self) -> str:
        """Gets the intent_thread_url of this StageDictExtension.


        :return: The intent_thread_url of this StageDictExtension.
        :rtype: str
        """
        return self._intent_thread_url

    @intent_thread_url.setter
    def intent_thread_url(self, intent_thread_url: str):
        """Sets the intent_thread_url of this StageDictExtension.


        :param intent_thread_url: The intent_thread_url of this StageDictExtension.
        :type intent_thread_url: str
        """

        self._intent_thread_url = intent_thread_url

    @property
    def announcement_url(self) -> str:
        """Gets the announcement_url of this StageDictExtension.


        :return: The announcement_url of this StageDictExtension.
        :rtype: str
        """
        return self._announcement_url

    @announcement_url.setter
    def announcement_url(self, announcement_url: str):
        """Sets the announcement_url of this StageDictExtension.


        :param announcement_url: The announcement_url of this StageDictExtension.
        :type announcement_url: str
        """

        self._announcement_url = announcement_url

    @property
    def origin_trial_id(self) -> str:
        """Gets the origin_trial_id of this StageDictExtension.


        :return: The origin_trial_id of this StageDictExtension.
        :rtype: str
        """
        return self._origin_trial_id

    @origin_trial_id.setter
    def origin_trial_id(self, origin_trial_id: str):
        """Sets the origin_trial_id of this StageDictExtension.


        :param origin_trial_id: The origin_trial_id of this StageDictExtension.
        :type origin_trial_id: str
        """

        self._origin_trial_id = origin_trial_id

    @property
    def experiment_goals(self) -> str:
        """Gets the experiment_goals of this StageDictExtension.


        :return: The experiment_goals of this StageDictExtension.
        :rtype: str
        """
        return self._experiment_goals

    @experiment_goals.setter
    def experiment_goals(self, experiment_goals: str):
        """Sets the experiment_goals of this StageDictExtension.


        :param experiment_goals: The experiment_goals of this StageDictExtension.
        :type experiment_goals: str
        """

        self._experiment_goals = experiment_goals

    @property
    def experiment_risks(self) -> str:
        """Gets the experiment_risks of this StageDictExtension.


        :return: The experiment_risks of this StageDictExtension.
        :rtype: str
        """
        return self._experiment_risks

    @experiment_risks.setter
    def experiment_risks(self, experiment_risks: str):
        """Sets the experiment_risks of this StageDictExtension.


        :param experiment_risks: The experiment_risks of this StageDictExtension.
        :type experiment_risks: str
        """

        self._experiment_risks = experiment_risks

    @property
    def extensions(self) -> List[StageDict]:
        """Gets the extensions of this StageDictExtension.


        :return: The extensions of this StageDictExtension.
        :rtype: List[StageDict]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions: List[StageDict]):
        """Sets the extensions of this StageDictExtension.


        :param extensions: The extensions of this StageDictExtension.
        :type extensions: List[StageDict]
        """

        self._extensions = extensions

    @property
    def origin_trial_feedback_url(self) -> str:
        """Gets the origin_trial_feedback_url of this StageDictExtension.


        :return: The origin_trial_feedback_url of this StageDictExtension.
        :rtype: str
        """
        return self._origin_trial_feedback_url

    @origin_trial_feedback_url.setter
    def origin_trial_feedback_url(self, origin_trial_feedback_url: str):
        """Sets the origin_trial_feedback_url of this StageDictExtension.


        :param origin_trial_feedback_url: The origin_trial_feedback_url of this StageDictExtension.
        :type origin_trial_feedback_url: str
        """

        self._origin_trial_feedback_url = origin_trial_feedback_url

    @property
    def ot_action_requested(self) -> bool:
        """Gets the ot_action_requested of this StageDictExtension.


        :return: The ot_action_requested of this StageDictExtension.
        :rtype: bool
        """
        return self._ot_action_requested

    @ot_action_requested.setter
    def ot_action_requested(self, ot_action_requested: bool):
        """Sets the ot_action_requested of this StageDictExtension.


        :param ot_action_requested: The ot_action_requested of this StageDictExtension.
        :type ot_action_requested: bool
        """
        if ot_action_requested is None:
            raise ValueError("Invalid value for `ot_action_requested`, must not be `None`")  # noqa: E501

        self._ot_action_requested = ot_action_requested

    @property
    def ot_activation_date(self) -> datetime:
        """Gets the ot_activation_date of this StageDictExtension.


        :return: The ot_activation_date of this StageDictExtension.
        :rtype: datetime
        """
        return self._ot_activation_date

    @ot_activation_date.setter
    def ot_activation_date(self, ot_activation_date: datetime):
        """Sets the ot_activation_date of this StageDictExtension.


        :param ot_activation_date: The ot_activation_date of this StageDictExtension.
        :type ot_activation_date: datetime
        """

        self._ot_activation_date = ot_activation_date

    @property
    def ot_approval_buganizer_component(self) -> int:
        """Gets the ot_approval_buganizer_component of this StageDictExtension.


        :return: The ot_approval_buganizer_component of this StageDictExtension.
        :rtype: int
        """
        return self._ot_approval_buganizer_component

    @ot_approval_buganizer_component.setter
    def ot_approval_buganizer_component(self, ot_approval_buganizer_component: int):
        """Sets the ot_approval_buganizer_component of this StageDictExtension.


        :param ot_approval_buganizer_component: The ot_approval_buganizer_component of this StageDictExtension.
        :type ot_approval_buganizer_component: int
        """

        self._ot_approval_buganizer_component = ot_approval_buganizer_component

    @property
    def ot_approval_buganizer_custom_field_id(self) -> int:
        """Gets the ot_approval_buganizer_custom_field_id of this StageDictExtension.


        :return: The ot_approval_buganizer_custom_field_id of this StageDictExtension.
        :rtype: int
        """
        return self._ot_approval_buganizer_custom_field_id

    @ot_approval_buganizer_custom_field_id.setter
    def ot_approval_buganizer_custom_field_id(self, ot_approval_buganizer_custom_field_id: int):
        """Sets the ot_approval_buganizer_custom_field_id of this StageDictExtension.


        :param ot_approval_buganizer_custom_field_id: The ot_approval_buganizer_custom_field_id of this StageDictExtension.
        :type ot_approval_buganizer_custom_field_id: int
        """

        self._ot_approval_buganizer_custom_field_id = ot_approval_buganizer_custom_field_id

    @property
    def ot_approval_criteria_url(self) -> str:
        """Gets the ot_approval_criteria_url of this StageDictExtension.


        :return: The ot_approval_criteria_url of this StageDictExtension.
        :rtype: str
        """
        return self._ot_approval_criteria_url

    @ot_approval_criteria_url.setter
    def ot_approval_criteria_url(self, ot_approval_criteria_url: str):
        """Sets the ot_approval_criteria_url of this StageDictExtension.


        :param ot_approval_criteria_url: The ot_approval_criteria_url of this StageDictExtension.
        :type ot_approval_criteria_url: str
        """

        self._ot_approval_criteria_url = ot_approval_criteria_url

    @property
    def ot_approval_group_email(self) -> str:
        """Gets the ot_approval_group_email of this StageDictExtension.


        :return: The ot_approval_group_email of this StageDictExtension.
        :rtype: str
        """
        return self._ot_approval_group_email

    @ot_approval_group_email.setter
    def ot_approval_group_email(self, ot_approval_group_email: str):
        """Sets the ot_approval_group_email of this StageDictExtension.


        :param ot_approval_group_email: The ot_approval_group_email of this StageDictExtension.
        :type ot_approval_group_email: str
        """

        self._ot_approval_group_email = ot_approval_group_email

    @property
    def ot_chromium_trial_name(self) -> str:
        """Gets the ot_chromium_trial_name of this StageDictExtension.


        :return: The ot_chromium_trial_name of this StageDictExtension.
        :rtype: str
        """
        return self._ot_chromium_trial_name

    @ot_chromium_trial_name.setter
    def ot_chromium_trial_name(self, ot_chromium_trial_name: str):
        """Sets the ot_chromium_trial_name of this StageDictExtension.


        :param ot_chromium_trial_name: The ot_chromium_trial_name of this StageDictExtension.
        :type ot_chromium_trial_name: str
        """

        self._ot_chromium_trial_name = ot_chromium_trial_name

    @property
    def ot_description(self) -> str:
        """Gets the ot_description of this StageDictExtension.


        :return: The ot_description of this StageDictExtension.
        :rtype: str
        """
        return self._ot_description

    @ot_description.setter
    def ot_description(self, ot_description: str):
        """Sets the ot_description of this StageDictExtension.


        :param ot_description: The ot_description of this StageDictExtension.
        :type ot_description: str
        """

        self._ot_description = ot_description

    @property
    def ot_display_name(self) -> str:
        """Gets the ot_display_name of this StageDictExtension.


        :return: The ot_display_name of this StageDictExtension.
        :rtype: str
        """
        return self._ot_display_name

    @ot_display_name.setter
    def ot_display_name(self, ot_display_name: str):
        """Sets the ot_display_name of this StageDictExtension.


        :param ot_display_name: The ot_display_name of this StageDictExtension.
        :type ot_display_name: str
        """

        self._ot_display_name = ot_display_name

    @property
    def ot_documentation_url(self) -> str:
        """Gets the ot_documentation_url of this StageDictExtension.


        :return: The ot_documentation_url of this StageDictExtension.
        :rtype: str
        """
        return self._ot_documentation_url

    @ot_documentation_url.setter
    def ot_documentation_url(self, ot_documentation_url: str):
        """Sets the ot_documentation_url of this StageDictExtension.


        :param ot_documentation_url: The ot_documentation_url of this StageDictExtension.
        :type ot_documentation_url: str
        """

        self._ot_documentation_url = ot_documentation_url

    @property
    def ot_emails(self) -> List[str]:
        """Gets the ot_emails of this StageDictExtension.


        :return: The ot_emails of this StageDictExtension.
        :rtype: List[str]
        """
        return self._ot_emails

    @ot_emails.setter
    def ot_emails(self, ot_emails: List[str]):
        """Sets the ot_emails of this StageDictExtension.


        :param ot_emails: The ot_emails of this StageDictExtension.
        :type ot_emails: List[str]
        """
        if ot_emails is None:
            raise ValueError("Invalid value for `ot_emails`, must not be `None`")  # noqa: E501

        self._ot_emails = ot_emails

    @property
    def ot_feedback_submission_url(self) -> str:
        """Gets the ot_feedback_submission_url of this StageDictExtension.


        :return: The ot_feedback_submission_url of this StageDictExtension.
        :rtype: str
        """
        return self._ot_feedback_submission_url

    @ot_feedback_submission_url.setter
    def ot_feedback_submission_url(self, ot_feedback_submission_url: str):
        """Sets the ot_feedback_submission_url of this StageDictExtension.


        :param ot_feedback_submission_url: The ot_feedback_submission_url of this StageDictExtension.
        :type ot_feedback_submission_url: str
        """

        self._ot_feedback_submission_url = ot_feedback_submission_url

    @property
    def ot_has_third_party_support(self) -> bool:
        """Gets the ot_has_third_party_support of this StageDictExtension.


        :return: The ot_has_third_party_support of this StageDictExtension.
        :rtype: bool
        """
        return self._ot_has_third_party_support

    @ot_has_third_party_support.setter
    def ot_has_third_party_support(self, ot_has_third_party_support: bool):
        """Sets the ot_has_third_party_support of this StageDictExtension.


        :param ot_has_third_party_support: The ot_has_third_party_support of this StageDictExtension.
        :type ot_has_third_party_support: bool
        """
        if ot_has_third_party_support is None:
            raise ValueError("Invalid value for `ot_has_third_party_support`, must not be `None`")  # noqa: E501

        self._ot_has_third_party_support = ot_has_third_party_support

    @property
    def ot_is_critical_trial(self) -> bool:
        """Gets the ot_is_critical_trial of this StageDictExtension.


        :return: The ot_is_critical_trial of this StageDictExtension.
        :rtype: bool
        """
        return self._ot_is_critical_trial

    @ot_is_critical_trial.setter
    def ot_is_critical_trial(self, ot_is_critical_trial: bool):
        """Sets the ot_is_critical_trial of this StageDictExtension.


        :param ot_is_critical_trial: The ot_is_critical_trial of this StageDictExtension.
        :type ot_is_critical_trial: bool
        """
        if ot_is_critical_trial is None:
            raise ValueError("Invalid value for `ot_is_critical_trial`, must not be `None`")  # noqa: E501

        self._ot_is_critical_trial = ot_is_critical_trial

    @property
    def ot_is_deprecation_trial(self) -> bool:
        """Gets the ot_is_deprecation_trial of this StageDictExtension.


        :return: The ot_is_deprecation_trial of this StageDictExtension.
        :rtype: bool
        """
        return self._ot_is_deprecation_trial

    @ot_is_deprecation_trial.setter
    def ot_is_deprecation_trial(self, ot_is_deprecation_trial: bool):
        """Sets the ot_is_deprecation_trial of this StageDictExtension.


        :param ot_is_deprecation_trial: The ot_is_deprecation_trial of this StageDictExtension.
        :type ot_is_deprecation_trial: bool
        """
        if ot_is_deprecation_trial is None:
            raise ValueError("Invalid value for `ot_is_deprecation_trial`, must not be `None`")  # noqa: E501

        self._ot_is_deprecation_trial = ot_is_deprecation_trial

    @property
    def ot_owner_email(self) -> str:
        """Gets the ot_owner_email of this StageDictExtension.


        :return: The ot_owner_email of this StageDictExtension.
        :rtype: str
        """
        return self._ot_owner_email

    @ot_owner_email.setter
    def ot_owner_email(self, ot_owner_email: str):
        """Sets the ot_owner_email of this StageDictExtension.


        :param ot_owner_email: The ot_owner_email of this StageDictExtension.
        :type ot_owner_email: str
        """

        self._ot_owner_email = ot_owner_email

    @property
    def ot_require_approvals(self) -> bool:
        """Gets the ot_require_approvals of this StageDictExtension.


        :return: The ot_require_approvals of this StageDictExtension.
        :rtype: bool
        """
        return self._ot_require_approvals

    @ot_require_approvals.setter
    def ot_require_approvals(self, ot_require_approvals: bool):
        """Sets the ot_require_approvals of this StageDictExtension.


        :param ot_require_approvals: The ot_require_approvals of this StageDictExtension.
        :type ot_require_approvals: bool
        """
        if ot_require_approvals is None:
            raise ValueError("Invalid value for `ot_require_approvals`, must not be `None`")  # noqa: E501

        self._ot_require_approvals = ot_require_approvals

    @property
    def ot_setup_status(self) -> int:
        """Gets the ot_setup_status of this StageDictExtension.


        :return: The ot_setup_status of this StageDictExtension.
        :rtype: int
        """
        return self._ot_setup_status

    @ot_setup_status.setter
    def ot_setup_status(self, ot_setup_status: int):
        """Sets the ot_setup_status of this StageDictExtension.


        :param ot_setup_status: The ot_setup_status of this StageDictExtension.
        :type ot_setup_status: int
        """

        self._ot_setup_status = ot_setup_status

    @property
    def ot_webfeature_use_counter(self) -> str:
        """Gets the ot_webfeature_use_counter of this StageDictExtension.


        :return: The ot_webfeature_use_counter of this StageDictExtension.
        :rtype: str
        """
        return self._ot_webfeature_use_counter

    @ot_webfeature_use_counter.setter
    def ot_webfeature_use_counter(self, ot_webfeature_use_counter: str):
        """Sets the ot_webfeature_use_counter of this StageDictExtension.


        :param ot_webfeature_use_counter: The ot_webfeature_use_counter of this StageDictExtension.
        :type ot_webfeature_use_counter: str
        """

        self._ot_webfeature_use_counter = ot_webfeature_use_counter

    @property
    def ot_request_note(self) -> str:
        """Gets the ot_request_note of this StageDictExtension.


        :return: The ot_request_note of this StageDictExtension.
        :rtype: str
        """
        return self._ot_request_note

    @ot_request_note.setter
    def ot_request_note(self, ot_request_note: str):
        """Sets the ot_request_note of this StageDictExtension.


        :param ot_request_note: The ot_request_note of this StageDictExtension.
        :type ot_request_note: str
        """

        self._ot_request_note = ot_request_note

    @property
    def ot_stage_id(self) -> int:
        """Gets the ot_stage_id of this StageDictExtension.


        :return: The ot_stage_id of this StageDictExtension.
        :rtype: int
        """
        return self._ot_stage_id

    @ot_stage_id.setter
    def ot_stage_id(self, ot_stage_id: int):
        """Sets the ot_stage_id of this StageDictExtension.


        :param ot_stage_id: The ot_stage_id of this StageDictExtension.
        :type ot_stage_id: int
        """

        self._ot_stage_id = ot_stage_id

    @property
    def experiment_extension_reason(self) -> str:
        """Gets the experiment_extension_reason of this StageDictExtension.


        :return: The experiment_extension_reason of this StageDictExtension.
        :rtype: str
        """
        return self._experiment_extension_reason

    @experiment_extension_reason.setter
    def experiment_extension_reason(self, experiment_extension_reason: str):
        """Sets the experiment_extension_reason of this StageDictExtension.


        :param experiment_extension_reason: The experiment_extension_reason of this StageDictExtension.
        :type experiment_extension_reason: str
        """

        self._experiment_extension_reason = experiment_extension_reason

    @property
    def finch_url(self) -> str:
        """Gets the finch_url of this StageDictExtension.


        :return: The finch_url of this StageDictExtension.
        :rtype: str
        """
        return self._finch_url

    @finch_url.setter
    def finch_url(self, finch_url: str):
        """Sets the finch_url of this StageDictExtension.


        :param finch_url: The finch_url of this StageDictExtension.
        :type finch_url: str
        """

        self._finch_url = finch_url

    @property
    def rollout_details(self) -> str:
        """Gets the rollout_details of this StageDictExtension.


        :return: The rollout_details of this StageDictExtension.
        :rtype: str
        """
        return self._rollout_details

    @rollout_details.setter
    def rollout_details(self, rollout_details: str):
        """Sets the rollout_details of this StageDictExtension.


        :param rollout_details: The rollout_details of this StageDictExtension.
        :type rollout_details: str
        """

        self._rollout_details = rollout_details

    @property
    def rollout_impact(self) -> int:
        """Gets the rollout_impact of this StageDictExtension.


        :return: The rollout_impact of this StageDictExtension.
        :rtype: int
        """
        return self._rollout_impact

    @rollout_impact.setter
    def rollout_impact(self, rollout_impact: int):
        """Sets the rollout_impact of this StageDictExtension.


        :param rollout_impact: The rollout_impact of this StageDictExtension.
        :type rollout_impact: int
        """

        self._rollout_impact = rollout_impact

    @property
    def rollout_milestone(self) -> int:
        """Gets the rollout_milestone of this StageDictExtension.


        :return: The rollout_milestone of this StageDictExtension.
        :rtype: int
        """
        return self._rollout_milestone

    @rollout_milestone.setter
    def rollout_milestone(self, rollout_milestone: int):
        """Sets the rollout_milestone of this StageDictExtension.


        :param rollout_milestone: The rollout_milestone of this StageDictExtension.
        :type rollout_milestone: int
        """

        self._rollout_milestone = rollout_milestone

    @property
    def rollout_platforms(self) -> List[str]:
        """Gets the rollout_platforms of this StageDictExtension.


        :return: The rollout_platforms of this StageDictExtension.
        :rtype: List[str]
        """
        return self._rollout_platforms

    @rollout_platforms.setter
    def rollout_platforms(self, rollout_platforms: List[str]):
        """Sets the rollout_platforms of this StageDictExtension.


        :param rollout_platforms: The rollout_platforms of this StageDictExtension.
        :type rollout_platforms: List[str]
        """

        self._rollout_platforms = rollout_platforms

    @property
    def enterprise_policies(self) -> List[str]:
        """Gets the enterprise_policies of this StageDictExtension.


        :return: The enterprise_policies of this StageDictExtension.
        :rtype: List[str]
        """
        return self._enterprise_policies

    @enterprise_policies.setter
    def enterprise_policies(self, enterprise_policies: List[str]):
        """Sets the enterprise_policies of this StageDictExtension.


        :param enterprise_policies: The enterprise_policies of this StageDictExtension.
        :type enterprise_policies: List[str]
        """

        self._enterprise_policies = enterprise_policies

    @property
    def pm_emails(self) -> List[str]:
        """Gets the pm_emails of this StageDictExtension.


        :return: The pm_emails of this StageDictExtension.
        :rtype: List[str]
        """
        return self._pm_emails

    @pm_emails.setter
    def pm_emails(self, pm_emails: List[str]):
        """Sets the pm_emails of this StageDictExtension.


        :param pm_emails: The pm_emails of this StageDictExtension.
        :type pm_emails: List[str]
        """

        self._pm_emails = pm_emails

    @property
    def tl_emails(self) -> List[str]:
        """Gets the tl_emails of this StageDictExtension.


        :return: The tl_emails of this StageDictExtension.
        :rtype: List[str]
        """
        return self._tl_emails

    @tl_emails.setter
    def tl_emails(self, tl_emails: List[str]):
        """Sets the tl_emails of this StageDictExtension.


        :param tl_emails: The tl_emails of this StageDictExtension.
        :type tl_emails: List[str]
        """

        self._tl_emails = tl_emails

    @property
    def ux_emails(self) -> List[str]:
        """Gets the ux_emails of this StageDictExtension.


        :return: The ux_emails of this StageDictExtension.
        :rtype: List[str]
        """
        return self._ux_emails

    @ux_emails.setter
    def ux_emails(self, ux_emails: List[str]):
        """Sets the ux_emails of this StageDictExtension.


        :param ux_emails: The ux_emails of this StageDictExtension.
        :type ux_emails: List[str]
        """

        self._ux_emails = ux_emails

    @property
    def te_emails(self) -> List[str]:
        """Gets the te_emails of this StageDictExtension.


        :return: The te_emails of this StageDictExtension.
        :rtype: List[str]
        """
        return self._te_emails

    @te_emails.setter
    def te_emails(self, te_emails: List[str]):
        """Sets the te_emails of this StageDictExtension.


        :param te_emails: The te_emails of this StageDictExtension.
        :type te_emails: List[str]
        """

        self._te_emails = te_emails
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StageDictExtension(BaseModel):
    """
    StageDictExtension
    """ # noqa: E501
    id: StrictInt
    created: datetime
    feature_id: StrictInt
    stage_type: StrictInt
    display_name: StrictStr
    intent_stage: StrictInt
    intent_thread_url: Optional[StrictStr] = None
    announcement_url: Optional[StrictStr] = None
    origin_trial_id: Optional[StrictStr] = None
    experiment_goals: Optional[StrictStr] = None
    experiment_risks: Optional[StrictStr] = None
    extensions: Optional[List[StageDict]] = None
    origin_trial_feedback_url: Optional[StrictStr] = None
    ot_action_requested: StrictBool
    ot_activation_date: Optional[datetime] = None
    ot_approval_buganizer_component: Optional[StrictInt] = None
    ot_approval_buganizer_custom_field_id: Optional[StrictInt] = None
    ot_approval_criteria_url: Optional[StrictStr] = None
    ot_approval_group_email: Optional[StrictStr] = None
    ot_chromium_trial_name: Optional[StrictStr] = None
    ot_description: Optional[StrictStr] = None
    ot_display_name: Optional[StrictStr] = None
    ot_documentation_url: Optional[StrictStr] = None
    ot_emails: List[StrictStr]
    ot_feedback_submission_url: Optional[StrictStr] = None
    ot_has_third_party_support: StrictBool
    ot_is_critical_trial: StrictBool
    ot_is_deprecation_trial: StrictBool
    ot_owner_email: Optional[StrictStr] = None
    ot_require_approvals: StrictBool
    ot_setup_status: Optional[StrictInt] = None
    ot_webfeature_use_counter: Optional[StrictStr] = None
    ot_request_note: Optional[StrictStr] = None
    ot_stage_id: Optional[StrictInt] = None
    experiment_extension_reason: Optional[StrictStr] = None
    finch_url: Optional[StrictStr] = None
    rollout_details: Optional[StrictStr] = None
    rollout_impact: Optional[StrictInt] = None
    rollout_milestone: Optional[StrictInt] = None
    rollout_platforms: Optional[List[StrictStr]] = None
    enterprise_policies: Optional[List[StrictStr]] = None
    pm_emails: Optional[List[StrictStr]] = None
    tl_emails: Optional[List[StrictStr]] = None
    ux_emails: Optional[List[StrictStr]] = None
    te_emails: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "created", "feature_id", "stage_type", "display_name", "intent_stage", "intent_thread_url", "announcement_url", "origin_trial_id", "experiment_goals", "experiment_risks", "extensions", "origin_trial_feedback_url", "ot_action_requested", "ot_activation_date", "ot_approval_buganizer_component", "ot_approval_buganizer_custom_field_id", "ot_approval_criteria_url", "ot_approval_group_email", "ot_chromium_trial_name", "ot_description", "ot_display_name", "ot_documentation_url", "ot_emails", "ot_feedback_submission_url", "ot_has_third_party_support", "ot_is_critical_trial", "ot_is_deprecation_trial", "ot_owner_email", "ot_require_approvals", "ot_setup_status", "ot_webfeature_use_counter", "ot_request_note", "ot_stage_id", "experiment_extension_reason", "finch_url", "rollout_details", "rollout_impact", "rollout_milestone", "rollout_platforms", "enterprise_policies", "pm_emails", "tl_emails", "ux_emails", "te_emails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StageDictExtension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        # set to None if intent_thread_url (nullable) is None
        # and model_fields_set contains the field
        if self.intent_thread_url is None and "intent_thread_url" in self.model_fields_set:
            _dict['intent_thread_url'] = None

        # set to None if announcement_url (nullable) is None
        # and model_fields_set contains the field
        if self.announcement_url is None and "announcement_url" in self.model_fields_set:
            _dict['announcement_url'] = None

        # set to None if origin_trial_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_trial_id is None and "origin_trial_id" in self.model_fields_set:
            _dict['origin_trial_id'] = None

        # set to None if experiment_goals (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_goals is None and "experiment_goals" in self.model_fields_set:
            _dict['experiment_goals'] = None

        # set to None if experiment_risks (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_risks is None and "experiment_risks" in self.model_fields_set:
            _dict['experiment_risks'] = None

        # set to None if origin_trial_feedback_url (nullable) is None
        # and model_fields_set contains the field
        if self.origin_trial_feedback_url is None and "origin_trial_feedback_url" in self.model_fields_set:
            _dict['origin_trial_feedback_url'] = None

        # set to None if ot_activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.ot_activation_date is None and "ot_activation_date" in self.model_fields_set:
            _dict['ot_activation_date'] = None

        # set to None if ot_approval_buganizer_component (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_buganizer_component is None and "ot_approval_buganizer_component" in self.model_fields_set:
            _dict['ot_approval_buganizer_component'] = None

        # set to None if ot_approval_buganizer_custom_field_id (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_buganizer_custom_field_id is None and "ot_approval_buganizer_custom_field_id" in self.model_fields_set:
            _dict['ot_approval_buganizer_custom_field_id'] = None

        # set to None if ot_approval_criteria_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_criteria_url is None and "ot_approval_criteria_url" in self.model_fields_set:
            _dict['ot_approval_criteria_url'] = None

        # set to None if ot_approval_group_email (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_group_email is None and "ot_approval_group_email" in self.model_fields_set:
            _dict['ot_approval_group_email'] = None

        # set to None if ot_chromium_trial_name (nullable) is None
        # and model_fields_set contains the field
        if self.ot_chromium_trial_name is None and "ot_chromium_trial_name" in self.model_fields_set:
            _dict['ot_chromium_trial_name'] = None

        # set to None if ot_description (nullable) is None
        # and model_fields_set contains the field
        if self.ot_description is None and "ot_description" in self.model_fields_set:
            _dict['ot_description'] = None

        # set to None if ot_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.ot_display_name is None and "ot_display_name" in self.model_fields_set:
            _dict['ot_display_name'] = None

        # set to None if ot_documentation_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_documentation_url is None and "ot_documentation_url" in self.model_fields_set:
            _dict['ot_documentation_url'] = None

        # set to None if ot_feedback_submission_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_feedback_submission_url is None and "ot_feedback_submission_url" in self.model_fields_set:
            _dict['ot_feedback_submission_url'] = None

        # set to None if ot_owner_email (nullable) is None
        # and model_fields_set contains the field
        if self.ot_owner_email is None and "ot_owner_email" in self.model_fields_set:
            _dict['ot_owner_email'] = None

        # set to None if ot_setup_status (nullable) is None
        # and model_fields_set contains the field
        if self.ot_setup_status is None and "ot_setup_status" in self.model_fields_set:
            _dict['ot_setup_status'] = None

        # set to None if ot_webfeature_use_counter (nullable) is None
        # and model_fields_set contains the field
        if self.ot_webfeature_use_counter is None and "ot_webfeature_use_counter" in self.model_fields_set:
            _dict['ot_webfeature_use_counter'] = None

        # set to None if ot_request_note (nullable) is None
        # and model_fields_set contains the field
        if self.ot_request_note is None and "ot_request_note" in self.model_fields_set:
            _dict['ot_request_note'] = None

        # set to None if ot_stage_id (nullable) is None
        # and model_fields_set contains the field
        if self.ot_stage_id is None and "ot_stage_id" in self.model_fields_set:
            _dict['ot_stage_id'] = None

        # set to None if experiment_extension_reason (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_extension_reason is None and "experiment_extension_reason" in self.model_fields_set:
            _dict['experiment_extension_reason'] = None

        # set to None if finch_url (nullable) is None
        # and model_fields_set contains the field
        if self.finch_url is None and "finch_url" in self.model_fields_set:
            _dict['finch_url'] = None

        # set to None if rollout_details (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_details is None and "rollout_details" in self.model_fields_set:
            _dict['rollout_details'] = None

        # set to None if rollout_impact (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_impact is None and "rollout_impact" in self.model_fields_set:
            _dict['rollout_impact'] = None

        # set to None if rollout_milestone (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_milestone is None and "rollout_milestone" in self.model_fields_set:
            _dict['rollout_milestone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StageDictExtension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": obj.get("created"),
            "feature_id": obj.get("feature_id"),
            "stage_type": obj.get("stage_type"),
            "display_name": obj.get("display_name"),
            "intent_stage": obj.get("intent_stage"),
            "intent_thread_url": obj.get("intent_thread_url"),
            "announcement_url": obj.get("announcement_url"),
            "origin_trial_id": obj.get("origin_trial_id"),
            "experiment_goals": obj.get("experiment_goals"),
            "experiment_risks": obj.get("experiment_risks"),
            "extensions": [StageDict.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "origin_trial_feedback_url": obj.get("origin_trial_feedback_url"),
            "ot_action_requested": obj.get("ot_action_requested"),
            "ot_activation_date": obj.get("ot_activation_date"),
            "ot_approval_buganizer_component": obj.get("ot_approval_buganizer_component"),
            "ot_approval_buganizer_custom_field_id": obj.get("ot_approval_buganizer_custom_field_id"),
            "ot_approval_criteria_url": obj.get("ot_approval_criteria_url"),
            "ot_approval_group_email": obj.get("ot_approval_group_email"),
            "ot_chromium_trial_name": obj.get("ot_chromium_trial_name"),
            "ot_description": obj.get("ot_description"),
            "ot_display_name": obj.get("ot_display_name"),
            "ot_documentation_url": obj.get("ot_documentation_url"),
            "ot_emails": obj.get("ot_emails"),
            "ot_feedback_submission_url": obj.get("ot_feedback_submission_url"),
            "ot_has_third_party_support": obj.get("ot_has_third_party_support"),
            "ot_is_critical_trial": obj.get("ot_is_critical_trial"),
            "ot_is_deprecation_trial": obj.get("ot_is_deprecation_trial"),
            "ot_owner_email": obj.get("ot_owner_email"),
            "ot_require_approvals": obj.get("ot_require_approvals"),
            "ot_setup_status": obj.get("ot_setup_status"),
            "ot_webfeature_use_counter": obj.get("ot_webfeature_use_counter"),
            "ot_request_note": obj.get("ot_request_note"),
            "ot_stage_id": obj.get("ot_stage_id"),
            "experiment_extension_reason": obj.get("experiment_extension_reason"),
            "finch_url": obj.get("finch_url"),
            "rollout_details": obj.get("rollout_details"),
            "rollout_impact": obj.get("rollout_impact"),
            "rollout_milestone": obj.get("rollout_milestone"),
            "rollout_platforms": obj.get("rollout_platforms"),
            "enterprise_policies": obj.get("enterprise_policies"),
            "pm_emails": obj.get("pm_emails"),
            "tl_emails": obj.get("tl_emails"),
            "ux_emails": obj.get("ux_emails"),
            "te_emails": obj.get("te_emails")
        })
        return _obj

from chromestatus_openapi.models.stage_dict import StageDict
# TODO: Rewrite to not use raise_errors
StageDictExtension.model_rebuild(raise_errors=False)

>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
