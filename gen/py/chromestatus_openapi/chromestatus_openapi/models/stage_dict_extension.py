# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StageDictExtension(BaseModel):
    """
    StageDictExtension
    """ # noqa: E501
    id: StrictInt
    created: datetime
    feature_id: StrictInt
    stage_type: StrictInt
    display_name: StrictStr
    intent_stage: StrictInt
    intent_thread_url: Optional[StrictStr] = None
    announcement_url: Optional[StrictStr] = None
    origin_trial_id: Optional[StrictStr] = None
    experiment_goals: Optional[StrictStr] = None
    experiment_risks: Optional[StrictStr] = None
    extensions: Optional[List[StageDict]] = None
    origin_trial_feedback_url: Optional[StrictStr] = None
    ot_action_requested: StrictBool
    ot_activation_date: Optional[datetime] = None
    ot_approval_buganizer_component: Optional[StrictInt] = None
    ot_approval_buganizer_custom_field_id: Optional[StrictInt] = None
    ot_approval_criteria_url: Optional[StrictStr] = None
    ot_approval_group_email: Optional[StrictStr] = None
    ot_chromium_trial_name: Optional[StrictStr] = None
    ot_description: Optional[StrictStr] = None
    ot_display_name: Optional[StrictStr] = None
    ot_documentation_url: Optional[StrictStr] = None
    ot_emails: List[StrictStr]
    ot_feedback_submission_url: Optional[StrictStr] = None
    ot_has_third_party_support: StrictBool
    ot_is_critical_trial: StrictBool
    ot_is_deprecation_trial: StrictBool
    ot_owner_email: Optional[StrictStr] = None
    ot_require_approvals: StrictBool
    ot_setup_status: Optional[StrictInt] = None
    ot_webfeature_use_counter: Optional[StrictStr] = None
    ot_request_note: Optional[StrictStr] = None
    ot_stage_id: Optional[StrictInt] = None
    experiment_extension_reason: Optional[StrictStr] = None
    finch_url: Optional[StrictStr] = None
    rollout_details: Optional[StrictStr] = None
    rollout_impact: Optional[StrictInt] = None
    rollout_milestone: Optional[StrictInt] = None
    rollout_platforms: Optional[List[StrictStr]] = None
    enterprise_policies: Optional[List[StrictStr]] = None
    pm_emails: Optional[List[StrictStr]] = None
    tl_emails: Optional[List[StrictStr]] = None
    ux_emails: Optional[List[StrictStr]] = None
    te_emails: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "created", "feature_id", "stage_type", "display_name", "intent_stage", "intent_thread_url", "announcement_url", "origin_trial_id", "experiment_goals", "experiment_risks", "extensions", "origin_trial_feedback_url", "ot_action_requested", "ot_activation_date", "ot_approval_buganizer_component", "ot_approval_buganizer_custom_field_id", "ot_approval_criteria_url", "ot_approval_group_email", "ot_chromium_trial_name", "ot_description", "ot_display_name", "ot_documentation_url", "ot_emails", "ot_feedback_submission_url", "ot_has_third_party_support", "ot_is_critical_trial", "ot_is_deprecation_trial", "ot_owner_email", "ot_require_approvals", "ot_setup_status", "ot_webfeature_use_counter", "ot_request_note", "ot_stage_id", "experiment_extension_reason", "finch_url", "rollout_details", "rollout_impact", "rollout_milestone", "rollout_platforms", "enterprise_policies", "pm_emails", "tl_emails", "ux_emails", "te_emails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StageDictExtension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        # set to None if intent_thread_url (nullable) is None
        # and model_fields_set contains the field
        if self.intent_thread_url is None and "intent_thread_url" in self.model_fields_set:
            _dict['intent_thread_url'] = None

        # set to None if announcement_url (nullable) is None
        # and model_fields_set contains the field
        if self.announcement_url is None and "announcement_url" in self.model_fields_set:
            _dict['announcement_url'] = None

        # set to None if origin_trial_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_trial_id is None and "origin_trial_id" in self.model_fields_set:
            _dict['origin_trial_id'] = None

        # set to None if experiment_goals (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_goals is None and "experiment_goals" in self.model_fields_set:
            _dict['experiment_goals'] = None

        # set to None if experiment_risks (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_risks is None and "experiment_risks" in self.model_fields_set:
            _dict['experiment_risks'] = None

        # set to None if origin_trial_feedback_url (nullable) is None
        # and model_fields_set contains the field
        if self.origin_trial_feedback_url is None and "origin_trial_feedback_url" in self.model_fields_set:
            _dict['origin_trial_feedback_url'] = None

        # set to None if ot_activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.ot_activation_date is None and "ot_activation_date" in self.model_fields_set:
            _dict['ot_activation_date'] = None

        # set to None if ot_approval_buganizer_component (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_buganizer_component is None and "ot_approval_buganizer_component" in self.model_fields_set:
            _dict['ot_approval_buganizer_component'] = None

        # set to None if ot_approval_buganizer_custom_field_id (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_buganizer_custom_field_id is None and "ot_approval_buganizer_custom_field_id" in self.model_fields_set:
            _dict['ot_approval_buganizer_custom_field_id'] = None

        # set to None if ot_approval_criteria_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_criteria_url is None and "ot_approval_criteria_url" in self.model_fields_set:
            _dict['ot_approval_criteria_url'] = None

        # set to None if ot_approval_group_email (nullable) is None
        # and model_fields_set contains the field
        if self.ot_approval_group_email is None and "ot_approval_group_email" in self.model_fields_set:
            _dict['ot_approval_group_email'] = None

        # set to None if ot_chromium_trial_name (nullable) is None
        # and model_fields_set contains the field
        if self.ot_chromium_trial_name is None and "ot_chromium_trial_name" in self.model_fields_set:
            _dict['ot_chromium_trial_name'] = None

        # set to None if ot_description (nullable) is None
        # and model_fields_set contains the field
        if self.ot_description is None and "ot_description" in self.model_fields_set:
            _dict['ot_description'] = None

        # set to None if ot_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.ot_display_name is None and "ot_display_name" in self.model_fields_set:
            _dict['ot_display_name'] = None

        # set to None if ot_documentation_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_documentation_url is None and "ot_documentation_url" in self.model_fields_set:
            _dict['ot_documentation_url'] = None

        # set to None if ot_feedback_submission_url (nullable) is None
        # and model_fields_set contains the field
        if self.ot_feedback_submission_url is None and "ot_feedback_submission_url" in self.model_fields_set:
            _dict['ot_feedback_submission_url'] = None

        # set to None if ot_owner_email (nullable) is None
        # and model_fields_set contains the field
        if self.ot_owner_email is None and "ot_owner_email" in self.model_fields_set:
            _dict['ot_owner_email'] = None

        # set to None if ot_setup_status (nullable) is None
        # and model_fields_set contains the field
        if self.ot_setup_status is None and "ot_setup_status" in self.model_fields_set:
            _dict['ot_setup_status'] = None

        # set to None if ot_webfeature_use_counter (nullable) is None
        # and model_fields_set contains the field
        if self.ot_webfeature_use_counter is None and "ot_webfeature_use_counter" in self.model_fields_set:
            _dict['ot_webfeature_use_counter'] = None

        # set to None if ot_request_note (nullable) is None
        # and model_fields_set contains the field
        if self.ot_request_note is None and "ot_request_note" in self.model_fields_set:
            _dict['ot_request_note'] = None

        # set to None if ot_stage_id (nullable) is None
        # and model_fields_set contains the field
        if self.ot_stage_id is None and "ot_stage_id" in self.model_fields_set:
            _dict['ot_stage_id'] = None

        # set to None if experiment_extension_reason (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_extension_reason is None and "experiment_extension_reason" in self.model_fields_set:
            _dict['experiment_extension_reason'] = None

        # set to None if finch_url (nullable) is None
        # and model_fields_set contains the field
        if self.finch_url is None and "finch_url" in self.model_fields_set:
            _dict['finch_url'] = None

        # set to None if rollout_details (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_details is None and "rollout_details" in self.model_fields_set:
            _dict['rollout_details'] = None

        # set to None if rollout_impact (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_impact is None and "rollout_impact" in self.model_fields_set:
            _dict['rollout_impact'] = None

        # set to None if rollout_milestone (nullable) is None
        # and model_fields_set contains the field
        if self.rollout_milestone is None and "rollout_milestone" in self.model_fields_set:
            _dict['rollout_milestone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StageDictExtension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": obj.get("created"),
            "feature_id": obj.get("feature_id"),
            "stage_type": obj.get("stage_type"),
            "display_name": obj.get("display_name"),
            "intent_stage": obj.get("intent_stage"),
            "intent_thread_url": obj.get("intent_thread_url"),
            "announcement_url": obj.get("announcement_url"),
            "origin_trial_id": obj.get("origin_trial_id"),
            "experiment_goals": obj.get("experiment_goals"),
            "experiment_risks": obj.get("experiment_risks"),
            "extensions": [StageDict.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "origin_trial_feedback_url": obj.get("origin_trial_feedback_url"),
            "ot_action_requested": obj.get("ot_action_requested"),
            "ot_activation_date": obj.get("ot_activation_date"),
            "ot_approval_buganizer_component": obj.get("ot_approval_buganizer_component"),
            "ot_approval_buganizer_custom_field_id": obj.get("ot_approval_buganizer_custom_field_id"),
            "ot_approval_criteria_url": obj.get("ot_approval_criteria_url"),
            "ot_approval_group_email": obj.get("ot_approval_group_email"),
            "ot_chromium_trial_name": obj.get("ot_chromium_trial_name"),
            "ot_description": obj.get("ot_description"),
            "ot_display_name": obj.get("ot_display_name"),
            "ot_documentation_url": obj.get("ot_documentation_url"),
            "ot_emails": obj.get("ot_emails"),
            "ot_feedback_submission_url": obj.get("ot_feedback_submission_url"),
            "ot_has_third_party_support": obj.get("ot_has_third_party_support"),
            "ot_is_critical_trial": obj.get("ot_is_critical_trial"),
            "ot_is_deprecation_trial": obj.get("ot_is_deprecation_trial"),
            "ot_owner_email": obj.get("ot_owner_email"),
            "ot_require_approvals": obj.get("ot_require_approvals"),
            "ot_setup_status": obj.get("ot_setup_status"),
            "ot_webfeature_use_counter": obj.get("ot_webfeature_use_counter"),
            "ot_request_note": obj.get("ot_request_note"),
            "ot_stage_id": obj.get("ot_stage_id"),
            "experiment_extension_reason": obj.get("experiment_extension_reason"),
            "finch_url": obj.get("finch_url"),
            "rollout_details": obj.get("rollout_details"),
            "rollout_impact": obj.get("rollout_impact"),
            "rollout_milestone": obj.get("rollout_milestone"),
            "rollout_platforms": obj.get("rollout_platforms"),
            "enterprise_policies": obj.get("enterprise_policies"),
            "pm_emails": obj.get("pm_emails"),
            "tl_emails": obj.get("tl_emails"),
            "ux_emails": obj.get("ux_emails"),
            "te_emails": obj.get("te_emails")
        })
        return _obj

from chromestatus_openapi.models.stage_dict import StageDict
# TODO: Rewrite to not use raise_errors
StageDictExtension.model_rebuild(raise_errors=False)

