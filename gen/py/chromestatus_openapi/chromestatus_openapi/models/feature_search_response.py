from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.verbose_feature_dict import VerboseFeatureDict
from chromestatus_openapi import util

from chromestatus_openapi.models.verbose_feature_dict import VerboseFeatureDict  # noqa: E501

class FeatureSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_count=None, features=None):  # noqa: E501
        """FeatureSearchResponse - a model defined in OpenAPI

        :param total_count: The total_count of this FeatureSearchResponse.  # noqa: E501
        :type total_count: int
        :param features: The features of this FeatureSearchResponse.  # noqa: E501
        :type features: List[VerboseFeatureDict]
        """
        self.openapi_types = {
            'total_count': int,
            'features': List[VerboseFeatureDict]
        }

        self.attribute_map = {
            'total_count': 'total_count',
            'features': 'features'
        }

        self._total_count = total_count
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureSearchResponse of this FeatureSearchResponse.  # noqa: E501
        :rtype: FeatureSearchResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_count(self) -> int:
        """Gets the total_count of this FeatureSearchResponse.


        :return: The total_count of this FeatureSearchResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """Sets the total_count of this FeatureSearchResponse.


        :param total_count: The total_count of this FeatureSearchResponse.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def features(self) -> List[VerboseFeatureDict]:
        """Gets the features of this FeatureSearchResponse.


        :return: The features of this FeatureSearchResponse.
        :rtype: List[VerboseFeatureDict]
        """
        return self._features

    @features.setter
    def features(self, features: List[VerboseFeatureDict]):
        """Sets the features of this FeatureSearchResponse.


        :param features: The features of this FeatureSearchResponse.
        :type features: List[VerboseFeatureDict]
        """

        self._features = features
