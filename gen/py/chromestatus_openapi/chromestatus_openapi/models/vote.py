from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class Vote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_id=None, gate_id=None, gate_type=None, set_by=None, set_on=None, state=None):  # noqa: E501
        """Vote - a model defined in OpenAPI

        :param feature_id: The feature_id of this Vote.  # noqa: E501
        :type feature_id: int
        :param gate_id: The gate_id of this Vote.  # noqa: E501
        :type gate_id: int
        :param gate_type: The gate_type of this Vote.  # noqa: E501
        :type gate_type: int
        :param set_by: The set_by of this Vote.  # noqa: E501
        :type set_by: str
        :param set_on: The set_on of this Vote.  # noqa: E501
        :type set_on: str
        :param state: The state of this Vote.  # noqa: E501
        :type state: int
        """
        self.openapi_types = {
            'feature_id': int,
            'gate_id': int,
            'gate_type': int,
            'set_by': str,
            'set_on': str,
            'state': int
        }

        self.attribute_map = {
            'feature_id': 'feature_id',
            'gate_id': 'gate_id',
            'gate_type': 'gate_type',
            'set_by': 'set_by',
            'set_on': 'set_on',
            'state': 'state'
        }

        self._feature_id = feature_id
        self._gate_id = gate_id
        self._gate_type = gate_type
        self._set_by = set_by
        self._set_on = set_on
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Vote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vote of this Vote.  # noqa: E501
        :rtype: Vote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_id(self) -> int:
        """Gets the feature_id of this Vote.


        :return: The feature_id of this Vote.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id: int):
        """Sets the feature_id of this Vote.


        :param feature_id: The feature_id of this Vote.
        :type feature_id: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    @property
    def gate_id(self) -> int:
        """Gets the gate_id of this Vote.


        :return: The gate_id of this Vote.
        :rtype: int
        """
        return self._gate_id

    @gate_id.setter
    def gate_id(self, gate_id: int):
        """Sets the gate_id of this Vote.


        :param gate_id: The gate_id of this Vote.
        :type gate_id: int
        """
        if gate_id is None:
            raise ValueError("Invalid value for `gate_id`, must not be `None`")  # noqa: E501

        self._gate_id = gate_id

    @property
    def gate_type(self) -> int:
        """Gets the gate_type of this Vote.


        :return: The gate_type of this Vote.
        :rtype: int
        """
        return self._gate_type

    @gate_type.setter
    def gate_type(self, gate_type: int):
        """Sets the gate_type of this Vote.


        :param gate_type: The gate_type of this Vote.
        :type gate_type: int
        """

        self._gate_type = gate_type

    @property
    def set_by(self) -> str:
        """Gets the set_by of this Vote.


        :return: The set_by of this Vote.
        :rtype: str
        """
        return self._set_by

    @set_by.setter
    def set_by(self, set_by: str):
        """Sets the set_by of this Vote.


        :param set_by: The set_by of this Vote.
        :type set_by: str
        """
        if set_by is None:
            raise ValueError("Invalid value for `set_by`, must not be `None`")  # noqa: E501

        self._set_by = set_by

    @property
    def set_on(self) -> str:
        """Gets the set_on of this Vote.


        :return: The set_on of this Vote.
        :rtype: str
        """
        return self._set_on

    @set_on.setter
    def set_on(self, set_on: str):
        """Sets the set_on of this Vote.


        :param set_on: The set_on of this Vote.
        :type set_on: str
        """
        if set_on is None:
            raise ValueError("Invalid value for `set_on`, must not be `None`")  # noqa: E501

        self._set_on = set_on

    @property
    def state(self) -> int:
        """Gets the state of this Vote.


        :return: The state of this Vote.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state: int):
        """Sets the state of this Vote.


        :param state: The state of this Vote.
        :type state: int
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state
