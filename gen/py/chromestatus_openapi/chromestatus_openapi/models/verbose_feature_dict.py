# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.feature_browsers_info import FeatureBrowsersInfo
from chromestatus_openapi.models.feature_dict_inner_resource_info import FeatureDictInnerResourceInfo
from chromestatus_openapi.models.feature_dict_inner_standards_info import FeatureDictInnerStandardsInfo
from chromestatus_openapi.models.feature_dict_inner_user_edit_info import FeatureDictInnerUserEditInfo
from chromestatus_openapi.models.stage_dict import StageDict
from typing import Optional, Set
from typing_extensions import Self

class VerboseFeatureDict(BaseModel):
    """
    VerboseFeatureDict
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="metadata")
    created: Optional[FeatureDictInnerUserEditInfo] = None
    updated: Optional[FeatureDictInnerUserEditInfo] = None
    accurate_as_of: Optional[StrictStr] = None
    creator_email: Optional[StrictStr] = None
    updater_email: Optional[StrictStr] = None
    owner_emails: Optional[List[StrictStr]] = None
    editor_emails: Optional[List[StrictStr]] = None
    cc_emails: Optional[List[StrictStr]] = None
    spec_mentor_emails: Optional[List[StrictStr]] = None
    unlisted: Optional[StrictBool] = None
    deleted: Optional[StrictBool] = None
    editors: Optional[List[StrictStr]] = Field(default=None, description="renamed metadata fields")
    cc_recipients: Optional[List[StrictStr]] = None
    spec_mentors: Optional[List[StrictStr]] = None
    creator: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="descriptive info")
    summary: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    category_int: Optional[StrictInt] = None
    blink_components: Optional[List[StrictStr]] = None
    star_count: Optional[StrictInt] = None
    search_tags: Optional[List[StrictStr]] = None
    feature_notes: Optional[StrictStr] = None
    enterprise_feature_categories: Optional[List[StrictStr]] = None
    feature_type: Optional[StrictStr] = Field(default=None, description="metadata - process info")
    feature_type_int: Optional[StrictInt] = None
    intent_stage: Optional[StrictStr] = None
    intent_stage_int: Optional[StrictInt] = None
    active_stage_id: Optional[StrictInt] = None
    bug_url: Optional[StrictStr] = None
    launch_bug_url: Optional[StrictStr] = None
    screenshot_links: Optional[List[StrictStr]] = None
    first_enterprise_notification_milestone: Optional[StrictInt] = None
    breaking_change: Optional[StrictBool] = None
    enterprise_impact: Optional[StrictInt] = None
    flag_name: Optional[StrictStr] = Field(default=None, description="Implementation in Chrome")
    finch_name: Optional[StrictStr] = None
    non_finch_justification: Optional[StrictStr] = None
    ongoing_constraints: Optional[StrictStr] = None
    motivation: Optional[StrictStr] = Field(default=None, description="Topic - Adoption")
    devtrial_instructions: Optional[StrictStr] = None
    activation_risks: Optional[StrictStr] = None
    measurement: Optional[StrictStr] = None
    availability_expectation: Optional[StrictStr] = None
    adoption_expectation: Optional[StrictStr] = None
    adoption_plan: Optional[StrictStr] = None
    initial_public_proposal_url: Optional[StrictStr] = Field(default=None, description="Gate")
    explainer_links: Optional[List[StrictStr]] = None
    requires_embedder_support: Optional[StrictBool] = None
    spec_link: Optional[StrictStr] = None
    api_spec: Optional[StrictStr] = None
    prefixed: Optional[StrictBool] = None
    interop_compat_risks: Optional[StrictStr] = None
    all_platforms: Optional[StrictBool] = None
    all_platforms_descr: Optional[StrictBool] = None
    tag_review: Optional[StrictStr] = None
    non_oss_deps: Optional[StrictStr] = None
    anticipated_spec_changes: Optional[StrictStr] = None
    security_risks: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    tag_review_status: Optional[StrictStr] = None
    tag_review_status_int: Optional[StrictInt] = None
    security_review_status: Optional[StrictStr] = None
    security_review_status_int: Optional[StrictInt] = None
    privacy_review_status: Optional[StrictStr] = None
    privacy_review_status_int: Optional[StrictInt] = None
    ergonomics_risks: Optional[StrictStr] = None
    wpt: Optional[StrictBool] = None
    wpt_descr: Optional[StrictStr] = None
    webview_risks: Optional[StrictStr] = None
    devrel_emails: Optional[List[StrictStr]] = None
    debuggability: Optional[StrictStr] = None
    doc_links: Optional[List[StrictStr]] = None
    sample_links: Optional[List[StrictStr]] = None
    stages: Optional[List[StageDict]] = None
    experiment_timeline: Optional[StrictStr] = None
    resources: Optional[FeatureDictInnerResourceInfo] = None
    comments: Optional[StrictStr] = None
    ff_views: Optional[StrictInt] = None
    safari_views: Optional[StrictInt] = None
    web_dev_views: Optional[StrictInt] = None
    browsers: Optional[FeatureBrowsersInfo] = None
    standards: Optional[FeatureDictInnerStandardsInfo] = None
    is_released: Optional[StrictBool] = None
    is_enterprise_feature: Optional[StrictBool] = None
    updated_display: Optional[StrictStr] = None
    new_crbug_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "created", "updated", "accurate_as_of", "creator_email", "updater_email", "owner_emails", "editor_emails", "cc_emails", "spec_mentor_emails", "unlisted", "deleted", "editors", "cc_recipients", "spec_mentors", "creator", "name", "summary", "category", "category_int", "blink_components", "star_count", "search_tags", "feature_notes", "enterprise_feature_categories", "feature_type", "feature_type_int", "intent_stage", "intent_stage_int", "active_stage_id", "bug_url", "launch_bug_url", "screenshot_links", "first_enterprise_notification_milestone", "breaking_change", "enterprise_impact", "flag_name", "finch_name", "non_finch_justification", "ongoing_constraints", "motivation", "devtrial_instructions", "activation_risks", "measurement", "availability_expectation", "adoption_expectation", "adoption_plan", "initial_public_proposal_url", "explainer_links", "requires_embedder_support", "spec_link", "api_spec", "prefixed", "interop_compat_risks", "all_platforms", "all_platforms_descr", "tag_review", "non_oss_deps", "anticipated_spec_changes", "security_risks", "tags", "tag_review_status", "tag_review_status_int", "security_review_status", "security_review_status_int", "privacy_review_status", "privacy_review_status_int", "ergonomics_risks", "wpt", "wpt_descr", "webview_risks", "devrel_emails", "debuggability", "doc_links", "sample_links", "stages", "experiment_timeline", "resources", "comments", "ff_views", "safari_views", "web_dev_views", "browsers", "standards", "is_released", "is_enterprise_feature", "updated_display", "new_crbug_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerboseFeatureDict from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stages (list)
        _items = []
        if self.stages:
            for _item in self.stages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stages'] = _items
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browsers
        if self.browsers:
            _dict['browsers'] = self.browsers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standards
        if self.standards:
            _dict['standards'] = self.standards.to_dict()
        # set to None if accurate_as_of (nullable) is None
        # and model_fields_set contains the field
        if self.accurate_as_of is None and "accurate_as_of" in self.model_fields_set:
            _dict['accurate_as_of'] = None

        # set to None if creator_email (nullable) is None
        # and model_fields_set contains the field
        if self.creator_email is None and "creator_email" in self.model_fields_set:
            _dict['creator_email'] = None

        # set to None if updater_email (nullable) is None
        # and model_fields_set contains the field
        if self.updater_email is None and "updater_email" in self.model_fields_set:
            _dict['updater_email'] = None

        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        # set to None if feature_notes (nullable) is None
        # and model_fields_set contains the field
        if self.feature_notes is None and "feature_notes" in self.model_fields_set:
            _dict['feature_notes'] = None

        # set to None if active_stage_id (nullable) is None
        # and model_fields_set contains the field
        if self.active_stage_id is None and "active_stage_id" in self.model_fields_set:
            _dict['active_stage_id'] = None

        # set to None if bug_url (nullable) is None
        # and model_fields_set contains the field
        if self.bug_url is None and "bug_url" in self.model_fields_set:
            _dict['bug_url'] = None

        # set to None if launch_bug_url (nullable) is None
        # and model_fields_set contains the field
        if self.launch_bug_url is None and "launch_bug_url" in self.model_fields_set:
            _dict['launch_bug_url'] = None

        # set to None if first_enterprise_notification_milestone (nullable) is None
        # and model_fields_set contains the field
        if self.first_enterprise_notification_milestone is None and "first_enterprise_notification_milestone" in self.model_fields_set:
            _dict['first_enterprise_notification_milestone'] = None

        # set to None if flag_name (nullable) is None
        # and model_fields_set contains the field
        if self.flag_name is None and "flag_name" in self.model_fields_set:
            _dict['flag_name'] = None

        # set to None if finch_name (nullable) is None
        # and model_fields_set contains the field
        if self.finch_name is None and "finch_name" in self.model_fields_set:
            _dict['finch_name'] = None

        # set to None if non_finch_justification (nullable) is None
        # and model_fields_set contains the field
        if self.non_finch_justification is None and "non_finch_justification" in self.model_fields_set:
            _dict['non_finch_justification'] = None

        # set to None if ongoing_constraints (nullable) is None
        # and model_fields_set contains the field
        if self.ongoing_constraints is None and "ongoing_constraints" in self.model_fields_set:
            _dict['ongoing_constraints'] = None

        # set to None if motivation (nullable) is None
        # and model_fields_set contains the field
        if self.motivation is None and "motivation" in self.model_fields_set:
            _dict['motivation'] = None

        # set to None if devtrial_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.devtrial_instructions is None and "devtrial_instructions" in self.model_fields_set:
            _dict['devtrial_instructions'] = None

        # set to None if activation_risks (nullable) is None
        # and model_fields_set contains the field
        if self.activation_risks is None and "activation_risks" in self.model_fields_set:
            _dict['activation_risks'] = None

        # set to None if measurement (nullable) is None
        # and model_fields_set contains the field
        if self.measurement is None and "measurement" in self.model_fields_set:
            _dict['measurement'] = None

        # set to None if availability_expectation (nullable) is None
        # and model_fields_set contains the field
        if self.availability_expectation is None and "availability_expectation" in self.model_fields_set:
            _dict['availability_expectation'] = None

        # set to None if adoption_expectation (nullable) is None
        # and model_fields_set contains the field
        if self.adoption_expectation is None and "adoption_expectation" in self.model_fields_set:
            _dict['adoption_expectation'] = None

        # set to None if adoption_plan (nullable) is None
        # and model_fields_set contains the field
        if self.adoption_plan is None and "adoption_plan" in self.model_fields_set:
            _dict['adoption_plan'] = None

        # set to None if initial_public_proposal_url (nullable) is None
        # and model_fields_set contains the field
        if self.initial_public_proposal_url is None and "initial_public_proposal_url" in self.model_fields_set:
            _dict['initial_public_proposal_url'] = None

        # set to None if spec_link (nullable) is None
        # and model_fields_set contains the field
        if self.spec_link is None and "spec_link" in self.model_fields_set:
            _dict['spec_link'] = None

        # set to None if api_spec (nullable) is None
        # and model_fields_set contains the field
        if self.api_spec is None and "api_spec" in self.model_fields_set:
            _dict['api_spec'] = None

        # set to None if prefixed (nullable) is None
        # and model_fields_set contains the field
        if self.prefixed is None and "prefixed" in self.model_fields_set:
            _dict['prefixed'] = None

        # set to None if interop_compat_risks (nullable) is None
        # and model_fields_set contains the field
        if self.interop_compat_risks is None and "interop_compat_risks" in self.model_fields_set:
            _dict['interop_compat_risks'] = None

        # set to None if all_platforms (nullable) is None
        # and model_fields_set contains the field
        if self.all_platforms is None and "all_platforms" in self.model_fields_set:
            _dict['all_platforms'] = None

        # set to None if all_platforms_descr (nullable) is None
        # and model_fields_set contains the field
        if self.all_platforms_descr is None and "all_platforms_descr" in self.model_fields_set:
            _dict['all_platforms_descr'] = None

        # set to None if tag_review (nullable) is None
        # and model_fields_set contains the field
        if self.tag_review is None and "tag_review" in self.model_fields_set:
            _dict['tag_review'] = None

        # set to None if non_oss_deps (nullable) is None
        # and model_fields_set contains the field
        if self.non_oss_deps is None and "non_oss_deps" in self.model_fields_set:
            _dict['non_oss_deps'] = None

        # set to None if anticipated_spec_changes (nullable) is None
        # and model_fields_set contains the field
        if self.anticipated_spec_changes is None and "anticipated_spec_changes" in self.model_fields_set:
            _dict['anticipated_spec_changes'] = None

        # set to None if security_risks (nullable) is None
        # and model_fields_set contains the field
        if self.security_risks is None and "security_risks" in self.model_fields_set:
            _dict['security_risks'] = None

        # set to None if tag_review_status_int (nullable) is None
        # and model_fields_set contains the field
        if self.tag_review_status_int is None and "tag_review_status_int" in self.model_fields_set:
            _dict['tag_review_status_int'] = None

        # set to None if security_review_status_int (nullable) is None
        # and model_fields_set contains the field
        if self.security_review_status_int is None and "security_review_status_int" in self.model_fields_set:
            _dict['security_review_status_int'] = None

        # set to None if privacy_review_status_int (nullable) is None
        # and model_fields_set contains the field
        if self.privacy_review_status_int is None and "privacy_review_status_int" in self.model_fields_set:
            _dict['privacy_review_status_int'] = None

        # set to None if ergonomics_risks (nullable) is None
        # and model_fields_set contains the field
        if self.ergonomics_risks is None and "ergonomics_risks" in self.model_fields_set:
            _dict['ergonomics_risks'] = None

        # set to None if wpt (nullable) is None
        # and model_fields_set contains the field
        if self.wpt is None and "wpt" in self.model_fields_set:
            _dict['wpt'] = None

        # set to None if wpt_descr (nullable) is None
        # and model_fields_set contains the field
        if self.wpt_descr is None and "wpt_descr" in self.model_fields_set:
            _dict['wpt_descr'] = None

        # set to None if webview_risks (nullable) is None
        # and model_fields_set contains the field
        if self.webview_risks is None and "webview_risks" in self.model_fields_set:
            _dict['webview_risks'] = None

        # set to None if debuggability (nullable) is None
        # and model_fields_set contains the field
        if self.debuggability is None and "debuggability" in self.model_fields_set:
            _dict['debuggability'] = None

        # set to None if experiment_timeline (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_timeline is None and "experiment_timeline" in self.model_fields_set:
            _dict['experiment_timeline'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if updated_display (nullable) is None
        # and model_fields_set contains the field
        if self.updated_display is None and "updated_display" in self.model_fields_set:
            _dict['updated_display'] = None

        # set to None if new_crbug_url (nullable) is None
        # and model_fields_set contains the field
        if self.new_crbug_url is None and "new_crbug_url" in self.model_fields_set:
            _dict['new_crbug_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerboseFeatureDict from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": FeatureDictInnerUserEditInfo.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "updated": FeatureDictInnerUserEditInfo.from_dict(obj["updated"]) if obj.get("updated") is not None else None,
            "accurate_as_of": obj.get("accurate_as_of"),
            "creator_email": obj.get("creator_email"),
            "updater_email": obj.get("updater_email"),
            "owner_emails": obj.get("owner_emails"),
            "editor_emails": obj.get("editor_emails"),
            "cc_emails": obj.get("cc_emails"),
            "spec_mentor_emails": obj.get("spec_mentor_emails"),
            "unlisted": obj.get("unlisted"),
            "deleted": obj.get("deleted"),
            "editors": obj.get("editors"),
            "cc_recipients": obj.get("cc_recipients"),
            "spec_mentors": obj.get("spec_mentors"),
            "creator": obj.get("creator"),
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "category": obj.get("category"),
            "category_int": obj.get("category_int"),
            "blink_components": obj.get("blink_components"),
            "star_count": obj.get("star_count"),
            "search_tags": obj.get("search_tags"),
            "feature_notes": obj.get("feature_notes"),
            "enterprise_feature_categories": obj.get("enterprise_feature_categories"),
            "feature_type": obj.get("feature_type"),
            "feature_type_int": obj.get("feature_type_int"),
            "intent_stage": obj.get("intent_stage"),
            "intent_stage_int": obj.get("intent_stage_int"),
            "active_stage_id": obj.get("active_stage_id"),
            "bug_url": obj.get("bug_url"),
            "launch_bug_url": obj.get("launch_bug_url"),
            "screenshot_links": obj.get("screenshot_links"),
            "first_enterprise_notification_milestone": obj.get("first_enterprise_notification_milestone"),
            "breaking_change": obj.get("breaking_change"),
            "enterprise_impact": obj.get("enterprise_impact"),
            "flag_name": obj.get("flag_name"),
            "finch_name": obj.get("finch_name"),
            "non_finch_justification": obj.get("non_finch_justification"),
            "ongoing_constraints": obj.get("ongoing_constraints"),
            "motivation": obj.get("motivation"),
            "devtrial_instructions": obj.get("devtrial_instructions"),
            "activation_risks": obj.get("activation_risks"),
            "measurement": obj.get("measurement"),
            "availability_expectation": obj.get("availability_expectation"),
            "adoption_expectation": obj.get("adoption_expectation"),
            "adoption_plan": obj.get("adoption_plan"),
            "initial_public_proposal_url": obj.get("initial_public_proposal_url"),
            "explainer_links": obj.get("explainer_links"),
            "requires_embedder_support": obj.get("requires_embedder_support"),
            "spec_link": obj.get("spec_link"),
            "api_spec": obj.get("api_spec"),
            "prefixed": obj.get("prefixed"),
            "interop_compat_risks": obj.get("interop_compat_risks"),
            "all_platforms": obj.get("all_platforms"),
            "all_platforms_descr": obj.get("all_platforms_descr"),
            "tag_review": obj.get("tag_review"),
            "non_oss_deps": obj.get("non_oss_deps"),
            "anticipated_spec_changes": obj.get("anticipated_spec_changes"),
            "security_risks": obj.get("security_risks"),
            "tags": obj.get("tags"),
            "tag_review_status": obj.get("tag_review_status"),
            "tag_review_status_int": obj.get("tag_review_status_int"),
            "security_review_status": obj.get("security_review_status"),
            "security_review_status_int": obj.get("security_review_status_int"),
            "privacy_review_status": obj.get("privacy_review_status"),
            "privacy_review_status_int": obj.get("privacy_review_status_int"),
            "ergonomics_risks": obj.get("ergonomics_risks"),
            "wpt": obj.get("wpt"),
            "wpt_descr": obj.get("wpt_descr"),
            "webview_risks": obj.get("webview_risks"),
            "devrel_emails": obj.get("devrel_emails"),
            "debuggability": obj.get("debuggability"),
            "doc_links": obj.get("doc_links"),
            "sample_links": obj.get("sample_links"),
            "stages": [StageDict.from_dict(_item) for _item in obj["stages"]] if obj.get("stages") is not None else None,
            "experiment_timeline": obj.get("experiment_timeline"),
            "resources": FeatureDictInnerResourceInfo.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "comments": obj.get("comments"),
            "ff_views": obj.get("ff_views"),
            "safari_views": obj.get("safari_views"),
            "web_dev_views": obj.get("web_dev_views"),
            "browsers": FeatureBrowsersInfo.from_dict(obj["browsers"]) if obj.get("browsers") is not None else None,
            "standards": FeatureDictInnerStandardsInfo.from_dict(obj["standards"]) if obj.get("standards") is not None else None,
            "is_released": obj.get("is_released"),
            "is_enterprise_feature": obj.get("is_enterprise_feature"),
            "updated_display": obj.get("updated_display"),
            "new_crbug_url": obj.get("new_crbug_url")
        })
        return _obj


