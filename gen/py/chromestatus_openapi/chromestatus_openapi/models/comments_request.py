from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class CommentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment=None, post_to_thread_type=None):  # noqa: E501
        """CommentsRequest - a model defined in OpenAPI

        :param comment: The comment of this CommentsRequest.  # noqa: E501
        :type comment: str
        :param post_to_thread_type: The post_to_thread_type of this CommentsRequest.  # noqa: E501
        :type post_to_thread_type: int
        """
        self.openapi_types = {
            'comment': str,
            'post_to_thread_type': int
        }

        self.attribute_map = {
            'comment': 'comment',
            'post_to_thread_type': 'postToThreadType'
        }

        self._comment = comment
        self._post_to_thread_type = post_to_thread_type

    @classmethod
    def from_dict(cls, dikt) -> 'CommentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CommentsRequest of this CommentsRequest.  # noqa: E501
        :rtype: CommentsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self) -> str:
        """Gets the comment of this CommentsRequest.


        :return: The comment of this CommentsRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this CommentsRequest.


        :param comment: The comment of this CommentsRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def post_to_thread_type(self) -> int:
        """Gets the post_to_thread_type of this CommentsRequest.


        :return: The post_to_thread_type of this CommentsRequest.
        :rtype: int
        """
        return self._post_to_thread_type

    @post_to_thread_type.setter
    def post_to_thread_type(self, post_to_thread_type: int):
        """Sets the post_to_thread_type of this CommentsRequest.


        :param post_to_thread_type: The post_to_thread_type of this CommentsRequest.
        :type post_to_thread_type: int
        """

        self._post_to_thread_type = post_to_thread_type
