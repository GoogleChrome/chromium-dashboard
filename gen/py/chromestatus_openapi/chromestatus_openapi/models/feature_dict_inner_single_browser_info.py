<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.feature_dict_inner_view_info import FeatureDictInnerViewInfo
from chromestatus_openapi import util

from chromestatus_openapi.models.feature_dict_inner_view_info import FeatureDictInnerViewInfo  # noqa: E501

class FeatureDictInnerSingleBrowserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, view=None):  # noqa: E501
        """FeatureDictInnerSingleBrowserInfo - a model defined in OpenAPI

        :param view: The view of this FeatureDictInnerSingleBrowserInfo.  # noqa: E501
        :type view: FeatureDictInnerViewInfo
        """
        self.openapi_types = {
            'view': FeatureDictInnerViewInfo
        }

        self.attribute_map = {
            'view': 'view'
        }

        self._view = view

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerSingleBrowserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerSingleBrowserInfo of this FeatureDictInnerSingleBrowserInfo.  # noqa: E501
        :rtype: FeatureDictInnerSingleBrowserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def view(self) -> FeatureDictInnerViewInfo:
        """Gets the view of this FeatureDictInnerSingleBrowserInfo.


        :return: The view of this FeatureDictInnerSingleBrowserInfo.
        :rtype: FeatureDictInnerViewInfo
        """
        return self._view

    @view.setter
    def view(self, view: FeatureDictInnerViewInfo):
        """Sets the view of this FeatureDictInnerSingleBrowserInfo.


        :param view: The view of this FeatureDictInnerSingleBrowserInfo.
        :type view: FeatureDictInnerViewInfo
        """

        self._view = view
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.feature_dict_inner_view_info import FeatureDictInnerViewInfo
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerSingleBrowserInfo(BaseModel):
    """
    FeatureDictInnerSingleBrowserInfo
    """ # noqa: E501
    view: Optional[FeatureDictInnerViewInfo] = None
    __properties: ClassVar[List[str]] = ["view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerSingleBrowserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerSingleBrowserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "view": FeatureDictInnerViewInfo.from_dict(obj["view"]) if obj.get("view") is not None else None
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
