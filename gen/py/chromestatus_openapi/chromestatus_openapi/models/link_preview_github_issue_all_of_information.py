# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LinkPreviewGithubIssueAllOfInformation(BaseModel):
    """
    LinkPreviewGithubIssueAllOfInformation
    """ # noqa: E501
    url: Optional[StrictStr] = None
    number: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    user_login: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    state_reason: Optional[StrictStr] = None
    assignee_login: Optional[StrictStr] = None
    created_at: Optional[date] = None
    updated_at: Optional[date] = None
    closed_at: Optional[date] = None
    labels: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["url", "number", "title", "user_login", "state", "state_reason", "assignee_login", "created_at", "updated_at", "closed_at", "labels"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

<<<<<<< HEAD
        :param url: The url of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type url: str
        :param number: The number of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type number: int
        :param title: The title of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type title: str
        :param user_login: The user_login of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type user_login: str
        :param state: The state of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type state: str
        :param state_reason: The state_reason of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type state_reason: str
        :param assignee_login: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type assignee_login: str
        :param created_at: The created_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type updated_at: datetime
        :param closed_at: The closed_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type closed_at: datetime
        :param labels: The labels of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type labels: List[str]
        """
        self.openapi_types = {
            'url': str,
            'number': int,
            'title': str,
            'user_login': str,
            'state': str,
            'state_reason': str,
            'assignee_login': str,
            'created_at': datetime,
            'updated_at': datetime,
            'closed_at': datetime,
            'labels': List[str]
        }
||||||| 76d0ce7e
        :param url: The url of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type url: str
        :param number: The number of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type number: int
        :param title: The title of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type title: str
        :param user_login: The user_login of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type user_login: str
        :param state: The state of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type state: str
        :param state_reason: The state_reason of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type state_reason: str
        :param assignee_login: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type assignee_login: str
        :param created_at: The created_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type created_at: date
        :param updated_at: The updated_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type updated_at: date
        :param closed_at: The closed_at of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type closed_at: date
        :param labels: The labels of this LinkPreviewGithubIssueAllOfInformation.  # noqa: E501
        :type labels: List[str]
        """
        self.openapi_types = {
            'url': str,
            'number': int,
            'title': str,
            'user_login': str,
            'state': str,
            'state_reason': str,
            'assignee_login': str,
            'created_at': date,
            'updated_at': date,
            'closed_at': date,
            'labels': List[str]
        }
=======
        if value not in set(['open', 'closed']):
            raise ValueError("must be one of enum values ('open', 'closed')")
        return value
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d

    @field_validator('state_reason')
    def state_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['completed', 'reopened', 'not_planned']):
            raise ValueError("must be one of enum values ('completed', 'reopened', 'not_planned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkPreviewGithubIssueAllOfInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkPreviewGithubIssueAllOfInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "number": obj.get("number"),
            "title": obj.get("title"),
            "user_login": obj.get("user_login"),
            "state": obj.get("state"),
            "state_reason": obj.get("state_reason"),
            "assignee_login": obj.get("assignee_login"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "closed_at": obj.get("closed_at"),
            "labels": obj.get("labels")
        })
        return _obj


<<<<<<< HEAD

        :return: The url of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this LinkPreviewGithubIssueAllOfInformation.


        :param url: The url of this LinkPreviewGithubIssueAllOfInformation.
        :type url: str
        """

        self._url = url

    @property
    def number(self) -> int:
        """Gets the number of this LinkPreviewGithubIssueAllOfInformation.


        :return: The number of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this LinkPreviewGithubIssueAllOfInformation.


        :param number: The number of this LinkPreviewGithubIssueAllOfInformation.
        :type number: int
        """

        self._number = number

    @property
    def title(self) -> str:
        """Gets the title of this LinkPreviewGithubIssueAllOfInformation.


        :return: The title of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this LinkPreviewGithubIssueAllOfInformation.


        :param title: The title of this LinkPreviewGithubIssueAllOfInformation.
        :type title: str
        """

        self._title = title

    @property
    def user_login(self) -> str:
        """Gets the user_login of this LinkPreviewGithubIssueAllOfInformation.


        :return: The user_login of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login: str):
        """Sets the user_login of this LinkPreviewGithubIssueAllOfInformation.


        :param user_login: The user_login of this LinkPreviewGithubIssueAllOfInformation.
        :type user_login: str
        """

        self._user_login = user_login

    @property
    def state(self) -> str:
        """Gets the state of this LinkPreviewGithubIssueAllOfInformation.


        :return: The state of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this LinkPreviewGithubIssueAllOfInformation.


        :param state: The state of this LinkPreviewGithubIssueAllOfInformation.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self) -> str:
        """Gets the state_reason of this LinkPreviewGithubIssueAllOfInformation.


        :return: The state_reason of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason: str):
        """Sets the state_reason of this LinkPreviewGithubIssueAllOfInformation.


        :param state_reason: The state_reason of this LinkPreviewGithubIssueAllOfInformation.
        :type state_reason: str
        """
        allowed_values = ["completed", "reopened", "not_planned"]  # noqa: E501
        if state_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `state_reason` ({0}), must be one of {1}"
                .format(state_reason, allowed_values)
            )

        self._state_reason = state_reason

    @property
    def assignee_login(self) -> str:
        """Gets the assignee_login of this LinkPreviewGithubIssueAllOfInformation.


        :return: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._assignee_login

    @assignee_login.setter
    def assignee_login(self, assignee_login: str):
        """Sets the assignee_login of this LinkPreviewGithubIssueAllOfInformation.


        :param assignee_login: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.
        :type assignee_login: str
        """

        self._assignee_login = assignee_login

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The created_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this LinkPreviewGithubIssueAllOfInformation.


        :param created_at: The created_at of this LinkPreviewGithubIssueAllOfInformation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The updated_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this LinkPreviewGithubIssueAllOfInformation.


        :param updated_at: The updated_at of this LinkPreviewGithubIssueAllOfInformation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def closed_at(self) -> datetime:
        """Gets the closed_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The closed_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at: datetime):
        """Sets the closed_at of this LinkPreviewGithubIssueAllOfInformation.


        :param closed_at: The closed_at of this LinkPreviewGithubIssueAllOfInformation.
        :type closed_at: datetime
        """

        self._closed_at = closed_at

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this LinkPreviewGithubIssueAllOfInformation.


        :return: The labels of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this LinkPreviewGithubIssueAllOfInformation.


        :param labels: The labels of this LinkPreviewGithubIssueAllOfInformation.
        :type labels: List[str]
        """

        self._labels = labels
||||||| 76d0ce7e

        :return: The url of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this LinkPreviewGithubIssueAllOfInformation.


        :param url: The url of this LinkPreviewGithubIssueAllOfInformation.
        :type url: str
        """

        self._url = url

    @property
    def number(self) -> int:
        """Gets the number of this LinkPreviewGithubIssueAllOfInformation.


        :return: The number of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this LinkPreviewGithubIssueAllOfInformation.


        :param number: The number of this LinkPreviewGithubIssueAllOfInformation.
        :type number: int
        """

        self._number = number

    @property
    def title(self) -> str:
        """Gets the title of this LinkPreviewGithubIssueAllOfInformation.


        :return: The title of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this LinkPreviewGithubIssueAllOfInformation.


        :param title: The title of this LinkPreviewGithubIssueAllOfInformation.
        :type title: str
        """

        self._title = title

    @property
    def user_login(self) -> str:
        """Gets the user_login of this LinkPreviewGithubIssueAllOfInformation.


        :return: The user_login of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login: str):
        """Sets the user_login of this LinkPreviewGithubIssueAllOfInformation.


        :param user_login: The user_login of this LinkPreviewGithubIssueAllOfInformation.
        :type user_login: str
        """

        self._user_login = user_login

    @property
    def state(self) -> str:
        """Gets the state of this LinkPreviewGithubIssueAllOfInformation.


        :return: The state of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this LinkPreviewGithubIssueAllOfInformation.


        :param state: The state of this LinkPreviewGithubIssueAllOfInformation.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self) -> str:
        """Gets the state_reason of this LinkPreviewGithubIssueAllOfInformation.


        :return: The state_reason of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason: str):
        """Sets the state_reason of this LinkPreviewGithubIssueAllOfInformation.


        :param state_reason: The state_reason of this LinkPreviewGithubIssueAllOfInformation.
        :type state_reason: str
        """
        allowed_values = ["completed", "reopened", "not_planned"]  # noqa: E501
        if state_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `state_reason` ({0}), must be one of {1}"
                .format(state_reason, allowed_values)
            )

        self._state_reason = state_reason

    @property
    def assignee_login(self) -> str:
        """Gets the assignee_login of this LinkPreviewGithubIssueAllOfInformation.


        :return: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: str
        """
        return self._assignee_login

    @assignee_login.setter
    def assignee_login(self, assignee_login: str):
        """Sets the assignee_login of this LinkPreviewGithubIssueAllOfInformation.


        :param assignee_login: The assignee_login of this LinkPreviewGithubIssueAllOfInformation.
        :type assignee_login: str
        """

        self._assignee_login = assignee_login

    @property
    def created_at(self) -> date:
        """Gets the created_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The created_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: date):
        """Sets the created_at of this LinkPreviewGithubIssueAllOfInformation.


        :param created_at: The created_at of this LinkPreviewGithubIssueAllOfInformation.
        :type created_at: date
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> date:
        """Gets the updated_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The updated_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: date
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: date):
        """Sets the updated_at of this LinkPreviewGithubIssueAllOfInformation.


        :param updated_at: The updated_at of this LinkPreviewGithubIssueAllOfInformation.
        :type updated_at: date
        """

        self._updated_at = updated_at

    @property
    def closed_at(self) -> date:
        """Gets the closed_at of this LinkPreviewGithubIssueAllOfInformation.


        :return: The closed_at of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: date
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at: date):
        """Sets the closed_at of this LinkPreviewGithubIssueAllOfInformation.


        :param closed_at: The closed_at of this LinkPreviewGithubIssueAllOfInformation.
        :type closed_at: date
        """

        self._closed_at = closed_at

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this LinkPreviewGithubIssueAllOfInformation.


        :return: The labels of this LinkPreviewGithubIssueAllOfInformation.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this LinkPreviewGithubIssueAllOfInformation.


        :param labels: The labels of this LinkPreviewGithubIssueAllOfInformation.
        :type labels: List[str]
        """

        self._labels = labels
=======
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
