from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class CreateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, is_admin=None, is_site_editor=None):  # noqa: E501
        """CreateAccountRequest - a model defined in OpenAPI

        :param email: The email of this CreateAccountRequest.  # noqa: E501
        :type email: str
        :param is_admin: The is_admin of this CreateAccountRequest.  # noqa: E501
        :type is_admin: bool
        :param is_site_editor: The is_site_editor of this CreateAccountRequest.  # noqa: E501
        :type is_site_editor: bool
        """
        self.openapi_types = {
            'email': str,
            'is_admin': bool,
            'is_site_editor': bool
        }

        self.attribute_map = {
            'email': 'email',
            'is_admin': 'isAdmin',
            'is_site_editor': 'isSiteEditor'
        }

        self._email = email
        self._is_admin = is_admin
        self._is_site_editor = is_site_editor

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAccountRequest of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self) -> str:
        """Gets the email of this CreateAccountRequest.


        :return: The email of this CreateAccountRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CreateAccountRequest.


        :param email: The email of this CreateAccountRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def is_admin(self) -> bool:
        """Gets the is_admin of this CreateAccountRequest.


        :return: The is_admin of this CreateAccountRequest.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: bool):
        """Sets the is_admin of this CreateAccountRequest.


        :param is_admin: The is_admin of this CreateAccountRequest.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_site_editor(self) -> bool:
        """Gets the is_site_editor of this CreateAccountRequest.


        :return: The is_site_editor of this CreateAccountRequest.
        :rtype: bool
        """
        return self._is_site_editor

    @is_site_editor.setter
    def is_site_editor(self, is_site_editor: bool):
        """Sets the is_site_editor of this CreateAccountRequest.


        :param is_site_editor: The is_site_editor of this CreateAccountRequest.
        :type is_site_editor: bool
        """

        self._is_site_editor = is_site_editor
