# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OriginTrialsInfo(BaseModel):
    """
    OriginTrialsInfo
    """ # noqa: E501
    id: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    origin_trial_feature_name: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    chromestatus_url: Optional[StrictStr] = None
    start_milestone: Optional[StrictStr] = None
    end_milestone: Optional[StrictStr] = None
    original_end_milestone: Optional[StrictStr] = None
    end_time: Optional[StrictStr] = None
    documentation_url: Optional[StrictStr] = None
    feedback_url: Optional[StrictStr] = None
    intent_to_experiment_url: Optional[StrictStr] = None
    trial_extensions: Optional[List[Dict[str, Any]]] = None
    type: Optional[StrictStr] = None
    allow_third_party_origins: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "display_name", "description", "origin_trial_feature_name", "enabled", "status", "chromestatus_url", "start_milestone", "end_milestone", "original_end_milestone", "end_time", "documentation_url", "feedback_url", "intent_to_experiment_url", "trial_extensions", "type", "allow_third_party_origins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginTrialsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginTrialsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "origin_trial_feature_name": obj.get("origin_trial_feature_name"),
            "enabled": obj.get("enabled"),
            "status": obj.get("status"),
            "chromestatus_url": obj.get("chromestatus_url"),
            "start_milestone": obj.get("start_milestone"),
            "end_milestone": obj.get("end_milestone"),
            "original_end_milestone": obj.get("original_end_milestone"),
            "end_time": obj.get("end_time"),
            "documentation_url": obj.get("documentation_url"),
            "feedback_url": obj.get("feedback_url"),
            "intent_to_experiment_url": obj.get("intent_to_experiment_url"),
            "trial_extensions": obj.get("trial_extensions"),
            "type": obj.get("type"),
            "allow_third_party_origins": obj.get("allow_third_party_origins")
        })
        return _obj


