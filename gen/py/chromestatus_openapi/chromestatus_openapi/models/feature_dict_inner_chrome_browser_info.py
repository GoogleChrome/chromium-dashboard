<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.feature_dict_inner_browser_status import FeatureDictInnerBrowserStatus
from chromestatus_openapi import util

from chromestatus_openapi.models.feature_dict_inner_browser_status import FeatureDictInnerBrowserStatus  # noqa: E501

class FeatureDictInnerChromeBrowserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bug=None, blink_components=None, devrel=None, owners=None, origintrial=None, intervention=None, prefixed=None, flag=None, status=None, desktop=None, android=None, webview=None, ios=None):  # noqa: E501
        """FeatureDictInnerChromeBrowserInfo - a model defined in OpenAPI

        :param bug: The bug of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type bug: str
        :param blink_components: The blink_components of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type blink_components: List[str]
        :param devrel: The devrel of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type devrel: List[str]
        :param owners: The owners of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type owners: List[str]
        :param origintrial: The origintrial of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type origintrial: bool
        :param intervention: The intervention of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type intervention: bool
        :param prefixed: The prefixed of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type prefixed: bool
        :param flag: The flag of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type flag: str
        :param status: The status of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type status: FeatureDictInnerBrowserStatus
        :param desktop: The desktop of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type desktop: int
        :param android: The android of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type android: int
        :param webview: The webview of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type webview: int
        :param ios: The ios of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :type ios: int
        """
        self.openapi_types = {
            'bug': str,
            'blink_components': List[str],
            'devrel': List[str],
            'owners': List[str],
            'origintrial': bool,
            'intervention': bool,
            'prefixed': bool,
            'flag': str,
            'status': FeatureDictInnerBrowserStatus,
            'desktop': int,
            'android': int,
            'webview': int,
            'ios': int
        }

        self.attribute_map = {
            'bug': 'bug',
            'blink_components': 'blink_components',
            'devrel': 'devrel',
            'owners': 'owners',
            'origintrial': 'origintrial',
            'intervention': 'intervention',
            'prefixed': 'prefixed',
            'flag': 'flag',
            'status': 'status',
            'desktop': 'desktop',
            'android': 'android',
            'webview': 'webview',
            'ios': 'ios'
        }

        self._bug = bug
        self._blink_components = blink_components
        self._devrel = devrel
        self._owners = owners
        self._origintrial = origintrial
        self._intervention = intervention
        self._prefixed = prefixed
        self._flag = flag
        self._status = status
        self._desktop = desktop
        self._android = android
        self._webview = webview
        self._ios = ios

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerChromeBrowserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerChromeBrowserInfo of this FeatureDictInnerChromeBrowserInfo.  # noqa: E501
        :rtype: FeatureDictInnerChromeBrowserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bug(self) -> str:
        """Gets the bug of this FeatureDictInnerChromeBrowserInfo.


        :return: The bug of this FeatureDictInnerChromeBrowserInfo.
        :rtype: str
        """
        return self._bug

    @bug.setter
    def bug(self, bug: str):
        """Sets the bug of this FeatureDictInnerChromeBrowserInfo.


        :param bug: The bug of this FeatureDictInnerChromeBrowserInfo.
        :type bug: str
        """

        self._bug = bug

    @property
    def blink_components(self) -> List[str]:
        """Gets the blink_components of this FeatureDictInnerChromeBrowserInfo.


        :return: The blink_components of this FeatureDictInnerChromeBrowserInfo.
        :rtype: List[str]
        """
        return self._blink_components

    @blink_components.setter
    def blink_components(self, blink_components: List[str]):
        """Sets the blink_components of this FeatureDictInnerChromeBrowserInfo.


        :param blink_components: The blink_components of this FeatureDictInnerChromeBrowserInfo.
        :type blink_components: List[str]
        """

        self._blink_components = blink_components

    @property
    def devrel(self) -> List[str]:
        """Gets the devrel of this FeatureDictInnerChromeBrowserInfo.


        :return: The devrel of this FeatureDictInnerChromeBrowserInfo.
        :rtype: List[str]
        """
        return self._devrel

    @devrel.setter
    def devrel(self, devrel: List[str]):
        """Sets the devrel of this FeatureDictInnerChromeBrowserInfo.


        :param devrel: The devrel of this FeatureDictInnerChromeBrowserInfo.
        :type devrel: List[str]
        """

        self._devrel = devrel

    @property
    def owners(self) -> List[str]:
        """Gets the owners of this FeatureDictInnerChromeBrowserInfo.


        :return: The owners of this FeatureDictInnerChromeBrowserInfo.
        :rtype: List[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners: List[str]):
        """Sets the owners of this FeatureDictInnerChromeBrowserInfo.


        :param owners: The owners of this FeatureDictInnerChromeBrowserInfo.
        :type owners: List[str]
        """

        self._owners = owners

    @property
    def origintrial(self) -> bool:
        """Gets the origintrial of this FeatureDictInnerChromeBrowserInfo.


        :return: The origintrial of this FeatureDictInnerChromeBrowserInfo.
        :rtype: bool
        """
        return self._origintrial

    @origintrial.setter
    def origintrial(self, origintrial: bool):
        """Sets the origintrial of this FeatureDictInnerChromeBrowserInfo.


        :param origintrial: The origintrial of this FeatureDictInnerChromeBrowserInfo.
        :type origintrial: bool
        """

        self._origintrial = origintrial

    @property
    def intervention(self) -> bool:
        """Gets the intervention of this FeatureDictInnerChromeBrowserInfo.


        :return: The intervention of this FeatureDictInnerChromeBrowserInfo.
        :rtype: bool
        """
        return self._intervention

    @intervention.setter
    def intervention(self, intervention: bool):
        """Sets the intervention of this FeatureDictInnerChromeBrowserInfo.


        :param intervention: The intervention of this FeatureDictInnerChromeBrowserInfo.
        :type intervention: bool
        """

        self._intervention = intervention

    @property
    def prefixed(self) -> bool:
        """Gets the prefixed of this FeatureDictInnerChromeBrowserInfo.


        :return: The prefixed of this FeatureDictInnerChromeBrowserInfo.
        :rtype: bool
        """
        return self._prefixed

    @prefixed.setter
    def prefixed(self, prefixed: bool):
        """Sets the prefixed of this FeatureDictInnerChromeBrowserInfo.


        :param prefixed: The prefixed of this FeatureDictInnerChromeBrowserInfo.
        :type prefixed: bool
        """

        self._prefixed = prefixed

    @property
    def flag(self) -> str:
        """Gets the flag of this FeatureDictInnerChromeBrowserInfo.


        :return: The flag of this FeatureDictInnerChromeBrowserInfo.
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag: str):
        """Sets the flag of this FeatureDictInnerChromeBrowserInfo.


        :param flag: The flag of this FeatureDictInnerChromeBrowserInfo.
        :type flag: str
        """

        self._flag = flag

    @property
    def status(self) -> FeatureDictInnerBrowserStatus:
        """Gets the status of this FeatureDictInnerChromeBrowserInfo.


        :return: The status of this FeatureDictInnerChromeBrowserInfo.
        :rtype: FeatureDictInnerBrowserStatus
        """
        return self._status

    @status.setter
    def status(self, status: FeatureDictInnerBrowserStatus):
        """Sets the status of this FeatureDictInnerChromeBrowserInfo.


        :param status: The status of this FeatureDictInnerChromeBrowserInfo.
        :type status: FeatureDictInnerBrowserStatus
        """

        self._status = status

    @property
    def desktop(self) -> int:
        """Gets the desktop of this FeatureDictInnerChromeBrowserInfo.


        :return: The desktop of this FeatureDictInnerChromeBrowserInfo.
        :rtype: int
        """
        return self._desktop

    @desktop.setter
    def desktop(self, desktop: int):
        """Sets the desktop of this FeatureDictInnerChromeBrowserInfo.


        :param desktop: The desktop of this FeatureDictInnerChromeBrowserInfo.
        :type desktop: int
        """

        self._desktop = desktop

    @property
    def android(self) -> int:
        """Gets the android of this FeatureDictInnerChromeBrowserInfo.


        :return: The android of this FeatureDictInnerChromeBrowserInfo.
        :rtype: int
        """
        return self._android

    @android.setter
    def android(self, android: int):
        """Sets the android of this FeatureDictInnerChromeBrowserInfo.


        :param android: The android of this FeatureDictInnerChromeBrowserInfo.
        :type android: int
        """

        self._android = android

    @property
    def webview(self) -> int:
        """Gets the webview of this FeatureDictInnerChromeBrowserInfo.


        :return: The webview of this FeatureDictInnerChromeBrowserInfo.
        :rtype: int
        """
        return self._webview

    @webview.setter
    def webview(self, webview: int):
        """Sets the webview of this FeatureDictInnerChromeBrowserInfo.


        :param webview: The webview of this FeatureDictInnerChromeBrowserInfo.
        :type webview: int
        """

        self._webview = webview

    @property
    def ios(self) -> int:
        """Gets the ios of this FeatureDictInnerChromeBrowserInfo.


        :return: The ios of this FeatureDictInnerChromeBrowserInfo.
        :rtype: int
        """
        return self._ios

    @ios.setter
    def ios(self, ios: int):
        """Sets the ios of this FeatureDictInnerChromeBrowserInfo.


        :param ios: The ios of this FeatureDictInnerChromeBrowserInfo.
        :type ios: int
        """

        self._ios = ios
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.feature_dict_inner_browser_status import FeatureDictInnerBrowserStatus
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerChromeBrowserInfo(BaseModel):
    """
    FeatureDictInnerChromeBrowserInfo
    """ # noqa: E501
    bug: Optional[StrictStr] = None
    blink_components: Optional[List[StrictStr]] = None
    devrel: Optional[List[StrictStr]] = None
    owners: Optional[List[StrictStr]] = None
    origintrial: Optional[StrictBool] = None
    intervention: Optional[StrictBool] = None
    prefixed: Optional[StrictBool] = None
    flag: Optional[StrictStr] = None
    status: Optional[FeatureDictInnerBrowserStatus] = None
    desktop: Optional[StrictInt] = None
    android: Optional[StrictInt] = None
    webview: Optional[StrictInt] = None
    ios: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["bug", "blink_components", "devrel", "owners", "origintrial", "intervention", "prefixed", "flag", "status", "desktop", "android", "webview", "ios"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerChromeBrowserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if bug (nullable) is None
        # and model_fields_set contains the field
        if self.bug is None and "bug" in self.model_fields_set:
            _dict['bug'] = None

        # set to None if blink_components (nullable) is None
        # and model_fields_set contains the field
        if self.blink_components is None and "blink_components" in self.model_fields_set:
            _dict['blink_components'] = None

        # set to None if devrel (nullable) is None
        # and model_fields_set contains the field
        if self.devrel is None and "devrel" in self.model_fields_set:
            _dict['devrel'] = None

        # set to None if owners (nullable) is None
        # and model_fields_set contains the field
        if self.owners is None and "owners" in self.model_fields_set:
            _dict['owners'] = None

        # set to None if origintrial (nullable) is None
        # and model_fields_set contains the field
        if self.origintrial is None and "origintrial" in self.model_fields_set:
            _dict['origintrial'] = None

        # set to None if intervention (nullable) is None
        # and model_fields_set contains the field
        if self.intervention is None and "intervention" in self.model_fields_set:
            _dict['intervention'] = None

        # set to None if prefixed (nullable) is None
        # and model_fields_set contains the field
        if self.prefixed is None and "prefixed" in self.model_fields_set:
            _dict['prefixed'] = None

        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if desktop (nullable) is None
        # and model_fields_set contains the field
        if self.desktop is None and "desktop" in self.model_fields_set:
            _dict['desktop'] = None

        # set to None if android (nullable) is None
        # and model_fields_set contains the field
        if self.android is None and "android" in self.model_fields_set:
            _dict['android'] = None

        # set to None if webview (nullable) is None
        # and model_fields_set contains the field
        if self.webview is None and "webview" in self.model_fields_set:
            _dict['webview'] = None

        # set to None if ios (nullable) is None
        # and model_fields_set contains the field
        if self.ios is None and "ios" in self.model_fields_set:
            _dict['ios'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerChromeBrowserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bug": obj.get("bug"),
            "blink_components": obj.get("blink_components"),
            "devrel": obj.get("devrel"),
            "owners": obj.get("owners"),
            "origintrial": obj.get("origintrial"),
            "intervention": obj.get("intervention"),
            "prefixed": obj.get("prefixed"),
            "flag": obj.get("flag"),
            "status": FeatureDictInnerBrowserStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "desktop": obj.get("desktop"),
            "android": obj.get("android"),
            "webview": obj.get("webview"),
            "ios": obj.get("ios")
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
