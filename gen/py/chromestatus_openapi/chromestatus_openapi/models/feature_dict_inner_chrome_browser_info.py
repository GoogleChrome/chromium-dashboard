# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.feature_dict_inner_browser_status import FeatureDictInnerBrowserStatus
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerChromeBrowserInfo(BaseModel):
    """
    FeatureDictInnerChromeBrowserInfo
    """ # noqa: E501
    bug: Optional[StrictStr] = None
    blink_components: Optional[List[StrictStr]] = None
    devrel: Optional[List[StrictStr]] = None
    owners: Optional[List[StrictStr]] = None
    origintrial: Optional[StrictBool] = None
    intervention: Optional[StrictBool] = None
    prefixed: Optional[StrictBool] = None
    flag: Optional[StrictStr] = None
    status: Optional[FeatureDictInnerBrowserStatus] = None
    desktop: Optional[StrictInt] = None
    android: Optional[StrictInt] = None
    webview: Optional[StrictInt] = None
    ios: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["bug", "blink_components", "devrel", "owners", "origintrial", "intervention", "prefixed", "flag", "status", "desktop", "android", "webview", "ios"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerChromeBrowserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if bug (nullable) is None
        # and model_fields_set contains the field
        if self.bug is None and "bug" in self.model_fields_set:
            _dict['bug'] = None

        # set to None if blink_components (nullable) is None
        # and model_fields_set contains the field
        if self.blink_components is None and "blink_components" in self.model_fields_set:
            _dict['blink_components'] = None

        # set to None if devrel (nullable) is None
        # and model_fields_set contains the field
        if self.devrel is None and "devrel" in self.model_fields_set:
            _dict['devrel'] = None

        # set to None if owners (nullable) is None
        # and model_fields_set contains the field
        if self.owners is None and "owners" in self.model_fields_set:
            _dict['owners'] = None

        # set to None if origintrial (nullable) is None
        # and model_fields_set contains the field
        if self.origintrial is None and "origintrial" in self.model_fields_set:
            _dict['origintrial'] = None

        # set to None if intervention (nullable) is None
        # and model_fields_set contains the field
        if self.intervention is None and "intervention" in self.model_fields_set:
            _dict['intervention'] = None

        # set to None if prefixed (nullable) is None
        # and model_fields_set contains the field
        if self.prefixed is None and "prefixed" in self.model_fields_set:
            _dict['prefixed'] = None

        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if desktop (nullable) is None
        # and model_fields_set contains the field
        if self.desktop is None and "desktop" in self.model_fields_set:
            _dict['desktop'] = None

        # set to None if android (nullable) is None
        # and model_fields_set contains the field
        if self.android is None and "android" in self.model_fields_set:
            _dict['android'] = None

        # set to None if webview (nullable) is None
        # and model_fields_set contains the field
        if self.webview is None and "webview" in self.model_fields_set:
            _dict['webview'] = None

        # set to None if ios (nullable) is None
        # and model_fields_set contains the field
        if self.ios is None and "ios" in self.model_fields_set:
            _dict['ios'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerChromeBrowserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bug": obj.get("bug"),
            "blink_components": obj.get("blink_components"),
            "devrel": obj.get("devrel"),
            "owners": obj.get("owners"),
            "origintrial": obj.get("origintrial"),
            "intervention": obj.get("intervention"),
            "prefixed": obj.get("prefixed"),
            "flag": obj.get("flag"),
            "status": FeatureDictInnerBrowserStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "desktop": obj.get("desktop"),
            "android": obj.get("android"),
            "webview": obj.get("webview"),
            "ios": obj.get("ios")
        })
        return _obj


