<<<<<<< HEAD
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class FeatureDictInnerUserEditInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, by=None, when=None):  # noqa: E501
        """FeatureDictInnerUserEditInfo - a model defined in OpenAPI

        :param by: The by of this FeatureDictInnerUserEditInfo.  # noqa: E501
        :type by: str
        :param when: The when of this FeatureDictInnerUserEditInfo.  # noqa: E501
        :type when: str
        """
        self.openapi_types = {
            'by': str,
            'when': str
        }

        self.attribute_map = {
            'by': 'by',
            'when': 'when'
        }

        self._by = by
        self._when = when

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureDictInnerUserEditInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureDictInnerUserEditInfo of this FeatureDictInnerUserEditInfo.  # noqa: E501
        :rtype: FeatureDictInnerUserEditInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def by(self) -> str:
        """Gets the by of this FeatureDictInnerUserEditInfo.


        :return: The by of this FeatureDictInnerUserEditInfo.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by: str):
        """Sets the by of this FeatureDictInnerUserEditInfo.


        :param by: The by of this FeatureDictInnerUserEditInfo.
        :type by: str
        """

        self._by = by

    @property
    def when(self) -> str:
        """Gets the when of this FeatureDictInnerUserEditInfo.


        :return: The when of this FeatureDictInnerUserEditInfo.
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when: str):
        """Sets the when of this FeatureDictInnerUserEditInfo.


        :param when: The when of this FeatureDictInnerUserEditInfo.
        :type when: str
        """

        self._when = when
||||||| 76d0ce7e
=======
# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FeatureDictInnerUserEditInfo(BaseModel):
    """
    FeatureDictInnerUserEditInfo
    """ # noqa: E501
    by: Optional[StrictStr] = None
    when: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["by", "when"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDictInnerUserEditInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDictInnerUserEditInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "by": obj.get("by"),
            "when": obj.get("when")
        })
        return _obj


>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
