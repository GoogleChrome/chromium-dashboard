from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.feature_link import FeatureLink
from chromestatus_openapi import util

from chromestatus_openapi.models.feature_link import FeatureLink  # noqa: E501

class PendingVerification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature=None, accurate_as_of=None):  # noqa: E501
        """PendingVerification - a model defined in OpenAPI

        :param feature: The feature of this PendingVerification.  # noqa: E501
        :type feature: FeatureLink
        :param accurate_as_of: The accurate_as_of of this PendingVerification.  # noqa: E501
        :type accurate_as_of: datetime
        """
        self.openapi_types = {
            'feature': FeatureLink,
            'accurate_as_of': datetime
        }

        self.attribute_map = {
            'feature': 'feature',
            'accurate_as_of': 'accurate_as_of'
        }

        self._feature = feature
        self._accurate_as_of = accurate_as_of

    @classmethod
    def from_dict(cls, dikt) -> 'PendingVerification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PendingVerification of this PendingVerification.  # noqa: E501
        :rtype: PendingVerification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature(self) -> FeatureLink:
        """Gets the feature of this PendingVerification.


        :return: The feature of this PendingVerification.
        :rtype: FeatureLink
        """
        return self._feature

    @feature.setter
    def feature(self, feature: FeatureLink):
        """Sets the feature of this PendingVerification.


        :param feature: The feature of this PendingVerification.
        :type feature: FeatureLink
        """
        if feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")  # noqa: E501

        self._feature = feature

    @property
    def accurate_as_of(self) -> datetime:
        """Gets the accurate_as_of of this PendingVerification.


        :return: The accurate_as_of of this PendingVerification.
        :rtype: datetime
        """
        return self._accurate_as_of

    @accurate_as_of.setter
    def accurate_as_of(self, accurate_as_of: datetime):
        """Sets the accurate_as_of of this PendingVerification.


        :param accurate_as_of: The accurate_as_of of this PendingVerification.
        :type accurate_as_of: datetime
        """

        self._accurate_as_of = accurate_as_of
