# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.field_info import FieldInfo
from typing import Optional, Set
from typing_extensions import Self

class CreateOriginTrialRequest(BaseModel):
    """
    CreateOriginTrialRequest
    """ # noqa: E501
    announcement_url: Optional[FieldInfo] = None
    browser: Optional[FieldInfo] = None
    ot_description: Optional[FieldInfo] = None
    display_name: Optional[FieldInfo] = None
    enterprise_policies: Optional[FieldInfo] = None
    finch_url: Optional[FieldInfo] = None
    experiment_goals: Optional[FieldInfo] = None
    experiment_risks: Optional[FieldInfo] = None
    experiment_extension_reason: Optional[FieldInfo] = None
    intent_thread_url: Optional[FieldInfo] = None
    origin_trial_feedback_url: Optional[FieldInfo] = None
    origin_trial_id: Optional[FieldInfo] = None
    ot_approval_buganizer_component: Optional[FieldInfo] = None
    ot_approval_buganizer_custom_field_id: Optional[FieldInfo] = None
    ot_approval_criteria_url: Optional[FieldInfo] = None
    ot_approval_group_email: Optional[FieldInfo] = None
    ot_chromium_trial_name: Optional[FieldInfo] = None
    ot_display_name: Optional[FieldInfo] = None
    ot_action_requested: Optional[FieldInfo] = None
    ot_documentation_url: Optional[FieldInfo] = None
    ot_emails: Optional[FieldInfo] = None
    ot_feedback_submission_url: Optional[FieldInfo] = None
    ot_has_third_party_support: Optional[FieldInfo] = None
    ot_is_critical_trial: Optional[FieldInfo] = None
    ot_is_deprecation_trial: Optional[FieldInfo] = None
    ot_owner_email: Optional[FieldInfo] = None
    ot_request_note: Optional[FieldInfo] = None
    ot_require_approvals: Optional[FieldInfo] = None
    ot_stage_id: Optional[FieldInfo] = None
    ot_webfeature_use_counter: Optional[FieldInfo] = None
    rollout_impact: Optional[FieldInfo] = None
    rollout_milestone: Optional[FieldInfo] = None
    rollout_platforms: Optional[FieldInfo] = None
    rollout_details: Optional[FieldInfo] = None
    desktop_first: Optional[FieldInfo] = None
    desktop_last: Optional[FieldInfo] = None
    android_first: Optional[FieldInfo] = None
    android_last: Optional[FieldInfo] = None
    ios_first: Optional[FieldInfo] = None
    ios_last: Optional[FieldInfo] = None
    webview_first: Optional[FieldInfo] = None
    webview_last: Optional[FieldInfo] = None
    __properties: ClassVar[List[str]] = ["announcement_url", "browser", "ot_description", "display_name", "enterprise_policies", "finch_url", "experiment_goals", "experiment_risks", "experiment_extension_reason", "intent_thread_url", "origin_trial_feedback_url", "origin_trial_id", "ot_approval_buganizer_component", "ot_approval_buganizer_custom_field_id", "ot_approval_criteria_url", "ot_approval_group_email", "ot_chromium_trial_name", "ot_display_name", "ot_action_requested", "ot_documentation_url", "ot_emails", "ot_feedback_submission_url", "ot_has_third_party_support", "ot_is_critical_trial", "ot_is_deprecation_trial", "ot_owner_email", "ot_request_note", "ot_require_approvals", "ot_stage_id", "ot_webfeature_use_counter", "rollout_impact", "rollout_milestone", "rollout_platforms", "rollout_details", "desktop_first", "desktop_last", "android_first", "android_last", "ios_first", "ios_last", "webview_first", "webview_last"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOriginTrialRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of announcement_url
        if self.announcement_url:
            _dict['announcement_url'] = self.announcement_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browser
        if self.browser:
            _dict['browser'] = self.browser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_description
        if self.ot_description:
            _dict['ot_description'] = self.ot_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['display_name'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_policies
        if self.enterprise_policies:
            _dict['enterprise_policies'] = self.enterprise_policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finch_url
        if self.finch_url:
            _dict['finch_url'] = self.finch_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiment_goals
        if self.experiment_goals:
            _dict['experiment_goals'] = self.experiment_goals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiment_risks
        if self.experiment_risks:
            _dict['experiment_risks'] = self.experiment_risks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiment_extension_reason
        if self.experiment_extension_reason:
            _dict['experiment_extension_reason'] = self.experiment_extension_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent_thread_url
        if self.intent_thread_url:
            _dict['intent_thread_url'] = self.intent_thread_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_trial_feedback_url
        if self.origin_trial_feedback_url:
            _dict['origin_trial_feedback_url'] = self.origin_trial_feedback_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_trial_id
        if self.origin_trial_id:
            _dict['origin_trial_id'] = self.origin_trial_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_approval_buganizer_component
        if self.ot_approval_buganizer_component:
            _dict['ot_approval_buganizer_component'] = self.ot_approval_buganizer_component.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_approval_buganizer_custom_field_id
        if self.ot_approval_buganizer_custom_field_id:
            _dict['ot_approval_buganizer_custom_field_id'] = self.ot_approval_buganizer_custom_field_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_approval_criteria_url
        if self.ot_approval_criteria_url:
            _dict['ot_approval_criteria_url'] = self.ot_approval_criteria_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_approval_group_email
        if self.ot_approval_group_email:
            _dict['ot_approval_group_email'] = self.ot_approval_group_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_chromium_trial_name
        if self.ot_chromium_trial_name:
            _dict['ot_chromium_trial_name'] = self.ot_chromium_trial_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_display_name
        if self.ot_display_name:
            _dict['ot_display_name'] = self.ot_display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_action_requested
        if self.ot_action_requested:
            _dict['ot_action_requested'] = self.ot_action_requested.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_documentation_url
        if self.ot_documentation_url:
            _dict['ot_documentation_url'] = self.ot_documentation_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_emails
        if self.ot_emails:
            _dict['ot_emails'] = self.ot_emails.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_feedback_submission_url
        if self.ot_feedback_submission_url:
            _dict['ot_feedback_submission_url'] = self.ot_feedback_submission_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_has_third_party_support
        if self.ot_has_third_party_support:
            _dict['ot_has_third_party_support'] = self.ot_has_third_party_support.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_is_critical_trial
        if self.ot_is_critical_trial:
            _dict['ot_is_critical_trial'] = self.ot_is_critical_trial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_is_deprecation_trial
        if self.ot_is_deprecation_trial:
            _dict['ot_is_deprecation_trial'] = self.ot_is_deprecation_trial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_owner_email
        if self.ot_owner_email:
            _dict['ot_owner_email'] = self.ot_owner_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_request_note
        if self.ot_request_note:
            _dict['ot_request_note'] = self.ot_request_note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_require_approvals
        if self.ot_require_approvals:
            _dict['ot_require_approvals'] = self.ot_require_approvals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_stage_id
        if self.ot_stage_id:
            _dict['ot_stage_id'] = self.ot_stage_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ot_webfeature_use_counter
        if self.ot_webfeature_use_counter:
            _dict['ot_webfeature_use_counter'] = self.ot_webfeature_use_counter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_impact
        if self.rollout_impact:
            _dict['rollout_impact'] = self.rollout_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_milestone
        if self.rollout_milestone:
            _dict['rollout_milestone'] = self.rollout_milestone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_platforms
        if self.rollout_platforms:
            _dict['rollout_platforms'] = self.rollout_platforms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_details
        if self.rollout_details:
            _dict['rollout_details'] = self.rollout_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of desktop_first
        if self.desktop_first:
            _dict['desktop_first'] = self.desktop_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of desktop_last
        if self.desktop_last:
            _dict['desktop_last'] = self.desktop_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_first
        if self.android_first:
            _dict['android_first'] = self.android_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_last
        if self.android_last:
            _dict['android_last'] = self.android_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_first
        if self.ios_first:
            _dict['ios_first'] = self.ios_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_last
        if self.ios_last:
            _dict['ios_last'] = self.ios_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webview_first
        if self.webview_first:
            _dict['webview_first'] = self.webview_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webview_last
        if self.webview_last:
            _dict['webview_last'] = self.webview_last.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOriginTrialRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "announcement_url": FieldInfo.from_dict(obj["announcement_url"]) if obj.get("announcement_url") is not None else None,
            "browser": FieldInfo.from_dict(obj["browser"]) if obj.get("browser") is not None else None,
            "ot_description": FieldInfo.from_dict(obj["ot_description"]) if obj.get("ot_description") is not None else None,
            "display_name": FieldInfo.from_dict(obj["display_name"]) if obj.get("display_name") is not None else None,
            "enterprise_policies": FieldInfo.from_dict(obj["enterprise_policies"]) if obj.get("enterprise_policies") is not None else None,
            "finch_url": FieldInfo.from_dict(obj["finch_url"]) if obj.get("finch_url") is not None else None,
            "experiment_goals": FieldInfo.from_dict(obj["experiment_goals"]) if obj.get("experiment_goals") is not None else None,
            "experiment_risks": FieldInfo.from_dict(obj["experiment_risks"]) if obj.get("experiment_risks") is not None else None,
            "experiment_extension_reason": FieldInfo.from_dict(obj["experiment_extension_reason"]) if obj.get("experiment_extension_reason") is not None else None,
            "intent_thread_url": FieldInfo.from_dict(obj["intent_thread_url"]) if obj.get("intent_thread_url") is not None else None,
            "origin_trial_feedback_url": FieldInfo.from_dict(obj["origin_trial_feedback_url"]) if obj.get("origin_trial_feedback_url") is not None else None,
            "origin_trial_id": FieldInfo.from_dict(obj["origin_trial_id"]) if obj.get("origin_trial_id") is not None else None,
            "ot_approval_buganizer_component": FieldInfo.from_dict(obj["ot_approval_buganizer_component"]) if obj.get("ot_approval_buganizer_component") is not None else None,
            "ot_approval_buganizer_custom_field_id": FieldInfo.from_dict(obj["ot_approval_buganizer_custom_field_id"]) if obj.get("ot_approval_buganizer_custom_field_id") is not None else None,
            "ot_approval_criteria_url": FieldInfo.from_dict(obj["ot_approval_criteria_url"]) if obj.get("ot_approval_criteria_url") is not None else None,
            "ot_approval_group_email": FieldInfo.from_dict(obj["ot_approval_group_email"]) if obj.get("ot_approval_group_email") is not None else None,
            "ot_chromium_trial_name": FieldInfo.from_dict(obj["ot_chromium_trial_name"]) if obj.get("ot_chromium_trial_name") is not None else None,
            "ot_display_name": FieldInfo.from_dict(obj["ot_display_name"]) if obj.get("ot_display_name") is not None else None,
            "ot_action_requested": FieldInfo.from_dict(obj["ot_action_requested"]) if obj.get("ot_action_requested") is not None else None,
            "ot_documentation_url": FieldInfo.from_dict(obj["ot_documentation_url"]) if obj.get("ot_documentation_url") is not None else None,
            "ot_emails": FieldInfo.from_dict(obj["ot_emails"]) if obj.get("ot_emails") is not None else None,
            "ot_feedback_submission_url": FieldInfo.from_dict(obj["ot_feedback_submission_url"]) if obj.get("ot_feedback_submission_url") is not None else None,
            "ot_has_third_party_support": FieldInfo.from_dict(obj["ot_has_third_party_support"]) if obj.get("ot_has_third_party_support") is not None else None,
            "ot_is_critical_trial": FieldInfo.from_dict(obj["ot_is_critical_trial"]) if obj.get("ot_is_critical_trial") is not None else None,
            "ot_is_deprecation_trial": FieldInfo.from_dict(obj["ot_is_deprecation_trial"]) if obj.get("ot_is_deprecation_trial") is not None else None,
            "ot_owner_email": FieldInfo.from_dict(obj["ot_owner_email"]) if obj.get("ot_owner_email") is not None else None,
            "ot_request_note": FieldInfo.from_dict(obj["ot_request_note"]) if obj.get("ot_request_note") is not None else None,
            "ot_require_approvals": FieldInfo.from_dict(obj["ot_require_approvals"]) if obj.get("ot_require_approvals") is not None else None,
            "ot_stage_id": FieldInfo.from_dict(obj["ot_stage_id"]) if obj.get("ot_stage_id") is not None else None,
            "ot_webfeature_use_counter": FieldInfo.from_dict(obj["ot_webfeature_use_counter"]) if obj.get("ot_webfeature_use_counter") is not None else None,
            "rollout_impact": FieldInfo.from_dict(obj["rollout_impact"]) if obj.get("rollout_impact") is not None else None,
            "rollout_milestone": FieldInfo.from_dict(obj["rollout_milestone"]) if obj.get("rollout_milestone") is not None else None,
            "rollout_platforms": FieldInfo.from_dict(obj["rollout_platforms"]) if obj.get("rollout_platforms") is not None else None,
            "rollout_details": FieldInfo.from_dict(obj["rollout_details"]) if obj.get("rollout_details") is not None else None,
            "desktop_first": FieldInfo.from_dict(obj["desktop_first"]) if obj.get("desktop_first") is not None else None,
            "desktop_last": FieldInfo.from_dict(obj["desktop_last"]) if obj.get("desktop_last") is not None else None,
            "android_first": FieldInfo.from_dict(obj["android_first"]) if obj.get("android_first") is not None else None,
            "android_last": FieldInfo.from_dict(obj["android_last"]) if obj.get("android_last") is not None else None,
            "ios_first": FieldInfo.from_dict(obj["ios_first"]) if obj.get("ios_first") is not None else None,
            "ios_last": FieldInfo.from_dict(obj["ios_last"]) if obj.get("ios_last") is not None else None,
            "webview_first": FieldInfo.from_dict(obj["webview_first"]) if obj.get("webview_first") is not None else None,
            "webview_last": FieldInfo.from_dict(obj["webview_last"]) if obj.get("webview_last") is not None else None
        })
        return _obj


