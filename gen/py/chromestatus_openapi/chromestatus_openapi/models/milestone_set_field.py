# coding: utf-8

"""
    chomestatus API

    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.field_info import FieldInfo
from typing import Optional, Set
from typing_extensions import Self

class MilestoneSetField(BaseModel):
    """
    MilestoneSetField
    """ # noqa: E501
    desktop_first: Optional[FieldInfo] = None
    desktop_last: Optional[FieldInfo] = None
    android_first: Optional[FieldInfo] = None
    android_last: Optional[FieldInfo] = None
    ios_first: Optional[FieldInfo] = None
    ios_last: Optional[FieldInfo] = None
    webview_first: Optional[FieldInfo] = None
    webview_last: Optional[FieldInfo] = None
    __properties: ClassVar[List[str]] = ["desktop_first", "desktop_last", "android_first", "android_last", "ios_first", "ios_last", "webview_first", "webview_last"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MilestoneSetField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of desktop_first
        if self.desktop_first:
            _dict['desktop_first'] = self.desktop_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of desktop_last
        if self.desktop_last:
            _dict['desktop_last'] = self.desktop_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_first
        if self.android_first:
            _dict['android_first'] = self.android_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_last
        if self.android_last:
            _dict['android_last'] = self.android_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_first
        if self.ios_first:
            _dict['ios_first'] = self.ios_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_last
        if self.ios_last:
            _dict['ios_last'] = self.ios_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webview_first
        if self.webview_first:
            _dict['webview_first'] = self.webview_first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webview_last
        if self.webview_last:
            _dict['webview_last'] = self.webview_last.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MilestoneSetField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "desktop_first": FieldInfo.from_dict(obj["desktop_first"]) if obj.get("desktop_first") is not None else None,
            "desktop_last": FieldInfo.from_dict(obj["desktop_last"]) if obj.get("desktop_last") is not None else None,
            "android_first": FieldInfo.from_dict(obj["android_first"]) if obj.get("android_first") is not None else None,
            "android_last": FieldInfo.from_dict(obj["android_last"]) if obj.get("android_last") is not None else None,
            "ios_first": FieldInfo.from_dict(obj["ios_first"]) if obj.get("ios_first") is not None else None,
            "ios_last": FieldInfo.from_dict(obj["ios_last"]) if obj.get("ios_last") is not None else None,
            "webview_first": FieldInfo.from_dict(obj["webview_first"]) if obj.get("webview_first") is not None else None,
            "webview_last": FieldInfo.from_dict(obj["webview_last"]) if obj.get("webview_last") is not None else None
        })
        return _obj


