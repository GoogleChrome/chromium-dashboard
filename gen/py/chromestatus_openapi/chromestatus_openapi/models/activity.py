from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.amendment import Amendment
from chromestatus_openapi import util

from chromestatus_openapi.models.amendment import Amendment  # noqa: E501

class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment_id=None, feature_id=None, gate_id=None, created=None, author=None, content=None, deleted_by=None, amendments=None):  # noqa: E501
        """Activity - a model defined in OpenAPI

        :param comment_id: The comment_id of this Activity.  # noqa: E501
        :type comment_id: int
        :param feature_id: The feature_id of this Activity.  # noqa: E501
        :type feature_id: int
        :param gate_id: The gate_id of this Activity.  # noqa: E501
        :type gate_id: int
        :param created: The created of this Activity.  # noqa: E501
        :type created: str
        :param author: The author of this Activity.  # noqa: E501
        :type author: str
        :param content: The content of this Activity.  # noqa: E501
        :type content: str
        :param deleted_by: The deleted_by of this Activity.  # noqa: E501
        :type deleted_by: str
        :param amendments: The amendments of this Activity.  # noqa: E501
        :type amendments: List[Amendment]
        """
        self.openapi_types = {
            'comment_id': int,
            'feature_id': int,
            'gate_id': int,
            'created': str,
            'author': str,
            'content': str,
            'deleted_by': str,
            'amendments': List[Amendment]
        }

        self.attribute_map = {
            'comment_id': 'comment_id',
            'feature_id': 'feature_id',
            'gate_id': 'gate_id',
            'created': 'created',
            'author': 'author',
            'content': 'content',
            'deleted_by': 'deleted_by',
            'amendments': 'amendments'
        }

        self._comment_id = comment_id
        self._feature_id = feature_id
        self._gate_id = gate_id
        self._created = created
        self._author = author
        self._content = content
        self._deleted_by = deleted_by
        self._amendments = amendments

    @classmethod
    def from_dict(cls, dikt) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Activity of this Activity.  # noqa: E501
        :rtype: Activity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment_id(self) -> int:
        """Gets the comment_id of this Activity.


        :return: The comment_id of this Activity.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id: int):
        """Sets the comment_id of this Activity.


        :param comment_id: The comment_id of this Activity.
        :type comment_id: int
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")  # noqa: E501

        self._comment_id = comment_id

    @property
    def feature_id(self) -> int:
        """Gets the feature_id of this Activity.


        :return: The feature_id of this Activity.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id: int):
        """Sets the feature_id of this Activity.


        :param feature_id: The feature_id of this Activity.
        :type feature_id: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    @property
    def gate_id(self) -> int:
        """Gets the gate_id of this Activity.


        :return: The gate_id of this Activity.
        :rtype: int
        """
        return self._gate_id

    @gate_id.setter
    def gate_id(self, gate_id: int):
        """Sets the gate_id of this Activity.


        :param gate_id: The gate_id of this Activity.
        :type gate_id: int
        """

        self._gate_id = gate_id

    @property
    def created(self) -> str:
        """Gets the created of this Activity.


        :return: The created of this Activity.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this Activity.


        :param created: The created of this Activity.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def author(self) -> str:
        """Gets the author of this Activity.


        :return: The author of this Activity.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Activity.


        :param author: The author of this Activity.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def content(self) -> str:
        """Gets the content of this Activity.


        :return: The content of this Activity.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Activity.


        :param content: The content of this Activity.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def deleted_by(self) -> str:
        """Gets the deleted_by of this Activity.


        :return: The deleted_by of this Activity.
        :rtype: str
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by: str):
        """Sets the deleted_by of this Activity.


        :param deleted_by: The deleted_by of this Activity.
        :type deleted_by: str
        """

        self._deleted_by = deleted_by

    @property
    def amendments(self) -> List[Amendment]:
        """Gets the amendments of this Activity.


        :return: The amendments of this Activity.
        :rtype: List[Amendment]
        """
        return self._amendments

    @amendments.setter
    def amendments(self, amendments: List[Amendment]):
        """Sets the amendments of this Activity.


        :param amendments: The amendments of this Activity.
        :type amendments: List[Amendment]
        """

        self._amendments = amendments
