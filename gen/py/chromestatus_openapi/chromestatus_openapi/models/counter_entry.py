from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class CounterEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key=None, count=None):  # noqa: E501
        """CounterEntry - a model defined in OpenAPI

        :param key: The key of this CounterEntry.  # noqa: E501
        :type key: str
        :param count: The count of this CounterEntry.  # noqa: E501
        :type count: int
        """
        self.openapi_types = {
            'key': str,
            'count': int
        }

        self.attribute_map = {
            'key': 'key',
            'count': 'count'
        }

        self._key = key
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'CounterEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CounterEntry of this CounterEntry.  # noqa: E501
        :rtype: CounterEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this CounterEntry.


        :return: The key of this CounterEntry.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this CounterEntry.


        :param key: The key of this CounterEntry.
        :type key: str
        """

        self._key = key

    @property
    def count(self) -> int:
        """Gets the count of this CounterEntry.


        :return: The count of this CounterEntry.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this CounterEntry.


        :param count: The count of this CounterEntry.
        :type count: int
        """

        self._count = count
