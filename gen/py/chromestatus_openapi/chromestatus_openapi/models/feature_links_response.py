# coding: utf-8

"""
    chomestatus API

<<<<<<< HEAD
from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.link_preview import LinkPreview
from chromestatus_openapi import util
||||||| 76d0ce7e
from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi.models.link_preview_base import LinkPreviewBase
from chromestatus_openapi import util
=======
    The API for chromestatus.com. chromestatus.com is the official tool used for tracking feature launches in Blink (the browser engine that powers Chrome and many other web browsers). This tool guides feature owners through our launch process and serves as a primary source for developer information that then ripples throughout the web developer ecosystem. More details at: https://github.com/GoogleChrome/chromium-dashboard
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d

<<<<<<< HEAD
from chromestatus_openapi.models.link_preview import LinkPreview  # noqa: E501

class FeatureLinksResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
||||||| 76d0ce7e
from chromestatus_openapi.models.link_preview_base import LinkPreviewBase  # noqa: E501

class FeatureLinksResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
=======
    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from chromestatus_openapi.models.link_preview_base import LinkPreviewBase
from typing import Optional, Set
from typing_extensions import Self

class FeatureLinksResponse(BaseModel):
    """
    FeatureLinksResponse
    """ # noqa: E501
    data: Optional[List[LinkPreviewBase]] = None
    has_stale_links: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["data", "has_stale_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

<<<<<<< HEAD
        :param data: The data of this FeatureLinksResponse.  # noqa: E501
        :type data: List[LinkPreview]
        :param has_stale_links: The has_stale_links of this FeatureLinksResponse.  # noqa: E501
        :type has_stale_links: bool
        """
        self.openapi_types = {
            'data': List[LinkPreview],
            'has_stale_links': bool
        }
||||||| 76d0ce7e
        :param data: The data of this FeatureLinksResponse.  # noqa: E501
        :type data: List[LinkPreviewBase]
        :param has_stale_links: The has_stale_links of this FeatureLinksResponse.  # noqa: E501
        :type has_stale_links: bool
        """
        self.openapi_types = {
            'data': List[LinkPreviewBase],
            'has_stale_links': bool
        }
=======
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureLinksResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

<<<<<<< HEAD
    @property
    def data(self) -> List[LinkPreview]:
        """Gets the data of this FeatureLinksResponse.
||||||| 76d0ce7e
    @property
    def data(self) -> List[LinkPreviewBase]:
        """Gets the data of this FeatureLinksResponse.
=======
        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureLinksResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [LinkPreviewBase.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "has_stale_links": obj.get("has_stale_links")
        })
        return _obj
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d


<<<<<<< HEAD
        :return: The data of this FeatureLinksResponse.
        :rtype: List[LinkPreview]
        """
        return self._data

    @data.setter
    def data(self, data: List[LinkPreview]):
        """Sets the data of this FeatureLinksResponse.


        :param data: The data of this FeatureLinksResponse.
        :type data: List[LinkPreview]
        """

        self._data = data

    @property
    def has_stale_links(self) -> bool:
        """Gets the has_stale_links of this FeatureLinksResponse.


        :return: The has_stale_links of this FeatureLinksResponse.
        :rtype: bool
        """
        return self._has_stale_links

    @has_stale_links.setter
    def has_stale_links(self, has_stale_links: bool):
        """Sets the has_stale_links of this FeatureLinksResponse.


        :param has_stale_links: The has_stale_links of this FeatureLinksResponse.
        :type has_stale_links: bool
        """

        self._has_stale_links = has_stale_links
||||||| 76d0ce7e
        :return: The data of this FeatureLinksResponse.
        :rtype: List[LinkPreviewBase]
        """
        return self._data

    @data.setter
    def data(self, data: List[LinkPreviewBase]):
        """Sets the data of this FeatureLinksResponse.


        :param data: The data of this FeatureLinksResponse.
        :type data: List[LinkPreviewBase]
        """

        self._data = data

    @property
    def has_stale_links(self) -> bool:
        """Gets the has_stale_links of this FeatureLinksResponse.


        :return: The has_stale_links of this FeatureLinksResponse.
        :rtype: bool
        """
        return self._has_stale_links

    @has_stale_links.setter
    def has_stale_links(self, has_stale_links: bool):
        """Sets the has_stale_links of this FeatureLinksResponse.


        :param has_stale_links: The has_stale_links of this FeatureLinksResponse.
        :type has_stale_links: bool
        """

        self._has_stale_links = has_stale_links
=======
>>>>>>> 9fcb27fe87d90d342617429deb845522889ce21d
