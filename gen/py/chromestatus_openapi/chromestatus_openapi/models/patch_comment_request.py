from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model import Model
from chromestatus_openapi import util


class PatchCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment_id=None, is_undelete=None):  # noqa: E501
        """PatchCommentRequest - a model defined in OpenAPI

        :param comment_id: The comment_id of this PatchCommentRequest.  # noqa: E501
        :type comment_id: int
        :param is_undelete: The is_undelete of this PatchCommentRequest.  # noqa: E501
        :type is_undelete: bool
        """
        self.openapi_types = {
            'comment_id': int,
            'is_undelete': bool
        }

        self.attribute_map = {
            'comment_id': 'commentId',
            'is_undelete': 'isUndelete'
        }

        self._comment_id = comment_id
        self._is_undelete = is_undelete

    @classmethod
    def from_dict(cls, dikt) -> 'PatchCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatchCommentRequest of this PatchCommentRequest.  # noqa: E501
        :rtype: PatchCommentRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment_id(self) -> int:
        """Gets the comment_id of this PatchCommentRequest.

        The ID of the comment to be updated  # noqa: E501

        :return: The comment_id of this PatchCommentRequest.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id: int):
        """Sets the comment_id of this PatchCommentRequest.

        The ID of the comment to be updated  # noqa: E501

        :param comment_id: The comment_id of this PatchCommentRequest.
        :type comment_id: int
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")  # noqa: E501

        self._comment_id = comment_id

    @property
    def is_undelete(self) -> bool:
        """Gets the is_undelete of this PatchCommentRequest.

        Indicates whether to undelete (true) or delete (false) the comment  # noqa: E501

        :return: The is_undelete of this PatchCommentRequest.
        :rtype: bool
        """
        return self._is_undelete

    @is_undelete.setter
    def is_undelete(self, is_undelete: bool):
        """Sets the is_undelete of this PatchCommentRequest.

        Indicates whether to undelete (true) or delete (false) the comment  # noqa: E501

        :param is_undelete: The is_undelete of this PatchCommentRequest.
        :type is_undelete: bool
        """
        if is_undelete is None:
            raise ValueError("Invalid value for `is_undelete`, must not be `None`")  # noqa: E501

        self._is_undelete = is_undelete
