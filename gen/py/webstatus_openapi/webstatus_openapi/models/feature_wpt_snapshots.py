# coding: utf-8

"""
    webstatus.dev API

    A tool to monitor and track the status of all Web Platform features across dimensions that are related to availability and implementation quality across browsers, and adoption by web developers. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from webstatus_openapi.models.wpt_feature_data import WPTFeatureData
from typing import Optional, Set
from typing_extensions import Self

class FeatureWPTSnapshots(BaseModel):
    """
    FeatureWPTSnapshots
    """ # noqa: E501
    stable: Optional[Dict[str, WPTFeatureData]] = Field(default=None, description="Contains snapshot of the stable WPT data. The keys for the object comes from the different cases in https://github.com/web-platform-tests/wpt.fyi/blob/fb5bae7c6d04563864ef1c28a263a0a8d6637c4e/shared/product_spec.go#L71-L104 ")
    experimental: Optional[Dict[str, WPTFeatureData]] = Field(default=None, description="Contains snapshot of the experimental WPT data. The keys for the object comes from the different cases in https://github.com/web-platform-tests/wpt.fyi/blob/fb5bae7c6d04563864ef1c28a263a0a8d6637c4e/shared/product_spec.go#L71-L104 ")
    __properties: ClassVar[List[str]] = ["stable", "experimental"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureWPTSnapshots from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in stable (dict)
        _field_dict = {}
        if self.stable:
            for _key in self.stable:
                if self.stable[_key]:
                    _field_dict[_key] = self.stable[_key].to_dict()
            _dict['stable'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in experimental (dict)
        _field_dict = {}
        if self.experimental:
            for _key in self.experimental:
                if self.experimental[_key]:
                    _field_dict[_key] = self.experimental[_key].to_dict()
            _dict['experimental'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureWPTSnapshots from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stable": dict(
                (_k, WPTFeatureData.from_dict(_v))
                for _k, _v in obj["stable"].items()
            )
            if obj.get("stable") is not None
            else None,
            "experimental": dict(
                (_k, WPTFeatureData.from_dict(_v))
                for _k, _v in obj["experimental"].items()
            )
            if obj.get("experimental") is not None
            else None
        })
        return _obj


